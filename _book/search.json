[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Slidecrafting with Quarto",
    "section": "",
    "text": "Preface\nHello! This book is about what I like to call slidecrafting; The art of putting together slides that are functional and aesthetically pleasing. I will be using quarto presentations throughout the whole book. Some of the advice will transcend Quarto presentations and apply to all kinds of slide technologies, but the book is written with Quarto in mind. There will thus inherently be some overlap with quarto documentation. It is suggested to read all the quarto revealjs documentation alongside this book for optimal learning.\nI think of slidecrafting as an art because of the inexact nature of many of the decisions you will be making; after all, many slide decks can be distilled down into a series of still images, each of which should be carefully crafted.\nThis book will not be able to teach you everything you need, but it will cover the parts of the process that stay constant from deck to deck, so you can focus on the content and develop your brand/style.\nThe book will be split into a number of semi-coherent sections, each with a number of chapters. This is not a perfect subdivision, but it serves its purpose quite well.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#theming",
    "href": "index.html#theming",
    "title": "Slidecrafting with Quarto",
    "section": "Theming",
    "text": "Theming\nThe first section is the theming section, where we go over how to change the visual appearance of your slides. It starts with a quick chapter showing you how to set up a style in less than 10 minutes. Then we will go into more details on how to use colors, fonts, and sizes to change the look and feel of your slides. The theme chapter goes over the process of developing a slide-by-slide theme. Lastly, we have a chapter going over some SCSS tips and tricks, which I find generally useful but doesn’t fit into any of the other chapters.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#content",
    "href": "index.html#content",
    "title": "Slidecrafting with Quarto",
    "section": "Content",
    "text": "Content\nThe contents section includes a chapter on how to change what is on the slides, either for variety or different ways to highlight new things. The elements chapter focuses on things that show up on the slides, such as images and figures. The layout talks about different ways to move elements of the page around “geographically”. Sometimes you want to highlight very specific things in some code, and for that to work, you will likely need to style the code manually. There are other times where you want to showcase code and its output, and that can be done using asciicast.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#interactivity",
    "href": "index.html#interactivity",
    "title": "Slidecrafting with Quarto",
    "section": "Interactivity",
    "text": "Interactivity\nThis section looks at how we fragments to change things up even more, allowing for elements to change and more.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#extensions",
    "href": "index.html#extensions",
    "title": "Slidecrafting with Quarto",
    "section": "Extensions",
    "text": "Extensions\nThis section will go over a handful of extensions that you can use to spruce up your slides.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#miscellaneous",
    "href": "index.html#miscellaneous",
    "title": "Slidecrafting with Quarto",
    "section": "miscellaneous",
    "text": "miscellaneous\nLastly, there is the miscellaneous chapter, which will contain everything that doesn’t fit anywhere else.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "10-minute.html",
    "href": "10-minute.html",
    "title": "1  10 Minute Theme",
    "section": "",
    "text": "1.1 What we need\nThis chapter will guide you through setting up a fully functional theme in approximately 10 minutes. The remaining chapters of this section delve into greater detail, showcasing tips and tricks along the way.\nThese slides will be used as the basis to show off each step of the way. First, here they are with no additional styling.\nAdding these things alone goes a long way. Each of the following subsections has a corresponding chapter associated with it.",
    "crumbs": [
      "Theming",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>10 Minute Theme</span>"
    ]
  },
  {
    "objectID": "10-minute.html#what-we-need",
    "href": "10-minute.html#what-we-need",
    "title": "1  10 Minute Theme",
    "section": "",
    "text": "fonts\ncolors\nsizes",
    "crumbs": [
      "Theming",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>10 Minute Theme</span>"
    ]
  },
  {
    "objectID": "10-minute.html#setup",
    "href": "10-minute.html#setup",
    "title": "1  10 Minute Theme",
    "section": "1.2 Setup",
    "text": "1.2 Setup\nBefore we get started, we need to set up the right files. For the best ease of use and flexibility, we are going to add an SCSS file to customize our theme.\nDo this by setting the theme field in the YAML and specifying the name of the style sheet you will be using.\nformat:\n  revealjs: \n    theme: [default, styles.scss]\n\n\n\n\n\n\nTip\n\n\n\nYou can combine an optional built-in theme with one or more style sheets. This can be useful if one of the themes contains most of what you want. Setting theme: [solarized, styles.scss] lets you take the parts of solarized you like and overwrite the parts you don’t. Likewise, you don’t even need to specify a theme and could instead just set a style sheet with theme: styles.scss.\n\n\nThe insides of the style sheet should look like this:\n/*-- scss:defaults --*/\n\n/*-- scss:rules --*/\nThe scss:defaults section is where we specify sass variables, which we will see in a bit.\nThe scss:rules section is where we write CSS or SCSS code to specify what we want to change.\nThe sass variables are able to handle most of the general changes we are going to make. And what can’t be changed with the sass variables will be done using CSS. This chapter only uses scss:defaults.",
    "crumbs": [
      "Theming",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>10 Minute Theme</span>"
    ]
  },
  {
    "objectID": "10-minute.html#fonts",
    "href": "10-minute.html#fonts",
    "title": "1  10 Minute Theme",
    "section": "1.3 Fonts",
    "text": "1.3 Fonts\nWe are going to control the fonts of the slides using 3 different sass variables.\n\npresentation-heading-font\nfont-family-sans-serif\nfont-family-monospace\n\nThe presentation-heading-font variable handles the headings of each page, font-family-sans-serif handles the body of the text, and font-family-monospace handles the monospaced text will be inline code and code blocks.\nIf you don’t set presentation-heading-font, it will use font-family-sans-serif for headings as well.\nThe easiest place to find non-local fonts is by using Google Fonts. Select the fonts you want to use, click “Get embed code”, find the @import code, and include it at the beginning of the scss:defaults section.\nThe below example uses Josefin Sans, Lato, and Space Mono.\n@import url('https://fonts.googleapis.com/css2?family=Josefin+Sans:ital,wght@0,100..700;1,100..700&family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&family=Space+Mono:ital,wght@0,400;0,700;1,400;1,700&display=swap');\nBelow that, we can set the sass variables.\n$presentation-heading-font: \"Josefin Sans\", sans-serif;\n$font-family-sans-serif: \"Lato\", sans-serif;\n$font-family-monospace: \"Space Mono\", monospace;\n\n\nSee the fonts chapter for further considerations and options.",
    "crumbs": [
      "Theming",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>10 Minute Theme</span>"
    ]
  },
  {
    "objectID": "10-minute.html#colors",
    "href": "10-minute.html#colors",
    "title": "1  10 Minute Theme",
    "section": "1.4 Colors",
    "text": "1.4 Colors\nWith regards to colors we have a number of things we can change. There are 5 main sass variables you should consider setting.\n\nbody-bg\nbody-color\npresentation-heading-color\nlink-color\ncode-color\n\nThe body-bg changes the background color of the slides, the body-color changes the text color, presentation-heading-color changes the heading text color, link-color changes the colors of the links, which also affects the hamburger menu and progress bar colors, and code-color modifies the inline code text color.\nThese are all set in the scss:defaults section as well. We will try to create a dark theme right now.\n$body-bg: #1C1C2B;\n$body-color: #bac2de;\n$presentation-heading-color: #cba6f7;\n$link-color: #fab387;\n$code-color: #89b4fa;\n\n\nSee the color chapter for further considerations and options.",
    "crumbs": [
      "Theming",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>10 Minute Theme</span>"
    ]
  },
  {
    "objectID": "10-minute.html#sizes",
    "href": "10-minute.html#sizes",
    "title": "1  10 Minute Theme",
    "section": "1.5 Sizes",
    "text": "1.5 Sizes\nThere are 5 main sass variables for changing the sizes of things in our slides, I end up mostly using 2 or 3 of them.\n\npresentation-font-size-root\npresentation-h1-font-size\npresentation-h2-font-size\npresentation-h3-font-size\npresentation-h4-font-size\ncode-block-font-size\n\nThe presentation-font-size-root variable changes basically everything, most sizes are calculated based on this value, so if you increase it, Then everything else will increase with it.\nThe code-block-font-size changes the sizing of the code block and the code output.\nThe remaining sass variables change the size of the different headers used in slides. I mostly use h1 and h2 headers and will thus mostly only set those, but the principle is the same for all of them.\nI find that most people end up using too small text, I’m thus increasing my font sizes quite a bit.\n$presentation-font-size-root: 40px;\n$presentation-h1-font-size: 80px;\n$presentation-h2-font-size: 60px;\n$code-block-font-size: 0.9em;\n\n\nSee the sizes chapter for further considerations and options.",
    "crumbs": [
      "Theming",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>10 Minute Theme</span>"
    ]
  },
  {
    "objectID": "colors.html",
    "href": "colors.html",
    "title": "2  Colors",
    "section": "",
    "text": "2.1 Finding Colors\nWhen finding your colors you will mainly look for 4 different types of colors:\nthis is a simplistic model and it will do us just fine. In general, I think having 3-6 colors is about the right amount of colors. This doesn’t mean that you couldn’t have 10 colors in your theme, but that you should be very deliberate in your choices.\nFor a small color theme, you would want a light and dark color for the background and text color. Dark text on a light background, or light text on dark background. Lastly, you pick a contrast color, something that looks good with both your background and text color.\ntalk about non-color backgrounds\ntheme colors,\nThis is what you get with the default themes that are provided in Quarto, and you can see them here in this gif:\nTODO: add the all-themes\nAnother personal favorite place of mine to go color theme hunting is on pinterest. I do a google search for “Pinterest color palettes” and go wild.\nTODO: don’t have gif here\nIf you have any specific ideas in mind you can expand your search to include words like “sea”, “beach”, “Halloween”, or “pastel”.\nThe main thing you need to keep in mind, and the biggest difference from other types of colors you may have worked with, such as in data visualization, is that you need to have high contrast between your colors. This is by far the most important thing that separates a good theme from a bad theme. The goal for your slides is for other people to see them, if your contrast is low then people can’t.\nThere are many color contrast checking websites out there, I like the https://colourcontrast.cc/ and Color Contrast Checker by Coolors. If possible I try to have a contrast of at least 12, but something like 10 will be okay from time to time. Which is quite a high contrast without being impossible to hit.\nThis contrast requirement means that both your background and text color will be quite dark and light, as it is quite hard for most highly saturated colors to have high contrasts to anything else.\nThis contrast is related to font size, the smaller and finer the text is, the more important it is that you have good contrast.\nNext, we take a look at highlight colors! This is my term for the colors you use to add some pop and to direct the viewers’ eyes. These colors are used for anything from link colors, highlighting, buttons, and artistic elements.\nyou generally want 1 to 3 of these colors. Having at least 1 is perfectly sufficient and you can use it to great effect to direct the colors. 3 colors are where I’m still comfortable that they don’t get diluted. Using too many highlighting colors can confuse your viewers.\nThese colors should be different enough from the background and text color that they stand out. If you are using multiple highlighting colors you should make sure that they are colorblind-friendly with each other. I like to use the check_color_blindness() function from the prismatic package.\nAs we see above, the green and red colors don’t work well together because they are almost identical for people with Deuteranopia.\nTo recap:\nAs long as I can keep the searching under 10 minutes the whole theme creation doesn’t take more than 15 minutes.",
    "crumbs": [
      "Theming",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Colors</span>"
    ]
  },
  {
    "objectID": "colors.html#finding-colors",
    "href": "colors.html#finding-colors",
    "title": "2  Colors",
    "section": "",
    "text": "background colors\ntext colors\nhighlight colors\ntheme colors\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nYou should try to avoid pure black and pure white. These colors can be a bit much and can be unpleasant to look at for long periods of time.\n\n\n\n\n\n\n\n\n\n\nI think of or search for a palette I like\nI pull out 1-2 background colors, 1-2 text colors, and 1-3 highlight colors\nI use my color contrast checkers to validate and possibly modify my colors so that they are within range\nI check that the colors I have are colorblind-friendly\n…\nDone!",
    "crumbs": [
      "Theming",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Colors</span>"
    ]
  },
  {
    "objectID": "colors.html#applying-colors",
    "href": "colors.html#applying-colors",
    "title": "2  Colors",
    "section": "2.2 Applying Colors",
    "text": "2.2 Applying Colors\nLet us try all of that in practice. I found this nice blue and yellow color palette on Pinterest.\n\nusing a color picking tool, I love ColorSlurp I can extract the colors to be\n*Orient*\n02577B\n\n*Fountain Blue*\n5CB4C2\n\n*Morning Glory*\n99D9DD\n\n*Mystic*\nE1E8EB\n\n*Selective Yellow*\nF4BA02\nI’m thinking I want to use dark blue as my background colors, and the lightest color as my text color. Before I do any modification I get the following\n\nAnd by playing the sliders a little bit I have a contrast and some colors I’m happy with\n\nWe now open up our .scss file and fill in a couple of values. Many of the colorings are done by relations, so we can get a lot done by setting $body-bg, $body-color, and $link-color. This needs to be done inside scss:defaults.\n/*-- scss:defaults --*/\n$body-bg: #01364C;\n$body-color: #F7F8F9;\n$link-color: #99D9DD;\n\n/*-- scss:rules --*/\nWhile the above configurations are perfectly fine, I find that using sass variables to be clear, and it helps us tremendously if we start making more changes. So I create variables all with the prefix theme- and descriptive names so I know what is what.\n/*-- scss:defaults --*/\n$theme-darkblue: #01364C;\n$theme-blue: #99D9DD;\n$theme-white: #F7F8F9;\n$theme-yellow: #F4BA02;\n\n$body-bg: $theme-darkblue;\n$body-color: $theme-white;\n$link-color: $theme-blue;\n\n/*-- scss:rules --*/\nThis is more code, but now I can read at a glance what is happening. This gives us the following colors on our slides. All done with minimal and effort. Using one of the highlight colors here to color the links, which also affects the hamburger menu and the progress bar at the bottom.\n\nThere are several sass variables that are used to control how our slides look. Notice how many of the values are defined as transformations of other values. So by setting $body-bg, $body-color, and $link-color we automatically gets things like $text-muted, $selection-bg, $border-color with values that works pretty well.\nLet us modify our theme just a bit more before moving on to fonts. We can use sass color functions to modify colors based on our theme.\nI want the headers to pop a little bit more, So I’m going to see if I can make them ever so slightly lighter blue. I see that the sass variable that controls the header color is $presentation-heading-color and that it defaults to $body-color. I use the lighten() function with $theme-blue, iterating a couple of times to find the perfect value.\n/*-- scss:defaults --*/\n$theme-darkblue: #01364C;\n$theme-blue: #99D9DD;\n$theme-white: #F7F8F9;\n$theme-yellow: #F4BA02;\n\n$body-bg: $theme-darkblue;\n$body-color: $theme-white;\n$link-color: $theme-blue;\n$presentation-heading-color: lighten($theme-blue, 15%);\n\n/*-- scss:rules --*/",
    "crumbs": [
      "Theming",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Colors</span>"
    ]
  },
  {
    "objectID": "colors.html#change-highlighting-theme",
    "href": "colors.html#change-highlighting-theme",
    "title": "2  Colors",
    "section": "2.3 Change highlighting theme",
    "text": "2.3 Change highlighting theme\nCan either be done with highlight-style as done in https://emilhvitfeldt.com/post/slidecraft-code-output/index.html#change-highlighting-theme\n\not: Other\nat: Attribute\nss: SpecialString\nan: Annotation\nfu: Function\nst: String\ncf: ControlFlow\nop: Operator\ner: Error\nbn: BaseN\nal: Alert\nva: Variable\npp: Preprocessor\nin: Information\nvs: VerbatimString\nwa: Warning\ndo: Documentation\nch: Char\ndt: DataType\nfl: Float\nco: Comment\ncv: CommentVar\ncn: Constant\nsc: SpecialChar\ndv: DecVal\nkw: Keyword\n\nor manually using css:\nTODO: add in comments denoting what is what\nlong way\ncode {\n  span.ot {\n    color: #003B4F;\n  }\n\n  span.at {\n    color: #657422;\n  }\n\n  span.ss {\n    color: #20794D;\n  }\n\n  span.an {\n    color: #5E5E5E;\n  }\n\n  span.fu {\n    color: #4758AB;\n  }\n\n  span.st {\n    color: #20794D;\n  }\n\n  span.cf {\n    color: #003B4F;\n  }\n\n  span.op {\n    color: #5E5E5E;\n  }\n\n  span.er {\n    color: #AD0000;\n  }\n\n  span.bn {\n    color: #AD0000;\n  }\n\n  span.al {\n    color: #AD0000;\n  }\n\n  span.va {\n    color: #111111;\n  }\n\n  span.bu {}\n\n  span.ex {}\n\n  span.pp {\n    color: #AD0000;\n  }\n\n  span.in {\n    color: #5E5E5E;\n  }\n\n  span.vs {\n    color: #20794D;\n  }\n\n  span.wa {\n    color: #5E5E5E;\n  }\n\n  span.do {\n    color: #5E5E5E;\n  }\n\n  span.im {\n    color: #00769E;\n  }\n\n  span.ch {\n    color: #20794D;\n  }\n\n  span.dt {\n    color: #AD0000;\n  }\n\n  span.fl {\n    color: #AD0000;\n  }\n\n  span.co {\n    color: #5E5E5E;\n  }\n\n  span.cv {\n    color: #5E5E5E;\n  }\n\n  span.cn {\n    color: #8f5902;\n  }\n\n  span.sc {\n    color: #5E5E5E;\n  }\n\n  span.dv {\n    color: #AD0000;\n  }\n\n  span.kw {\n    color: #003B4F;\n  }\n}\ncompact way:\ncode {\n  span.an,\n  span.op,\n  span.sc,\n  span.in,\n  span.wa,\n  span.do,\n  span.cv,\n  span.co {\n    color: #5E5E5E;\n  }\n\n  span.er,\n  span.bn,\n  span.al,\n  span.pp,\n  span.dt,\n  span.fl,\n  span.dv {\n    color: #AD0000;\n  }\n\n  span.ss,\n  span.st,\n  span.vs,\n  span.ch {\n    color: #20794D;\n  }\n\n  span.ot,\n  span.cf,\n  span.kw {\n    color: #003B4F;\n  }\n\n  span.at {\n    color: #657422;\n  }\n\n  span.fu {\n    color: #4758AB;\n  }\n\n  span.va {\n    color: #111111;\n  }\n\n  span.im {\n    color: #00769E;\n  }\n\n  span.cn {\n    color: #8f5902;\n  }\n\n  span.bu {}\n\n  span.ex {}\n}",
    "crumbs": [
      "Theming",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Colors</span>"
    ]
  },
  {
    "objectID": "fonts.html",
    "href": "fonts.html",
    "title": "3  Fonts",
    "section": "",
    "text": "3.1 Finding Fonts\nWe find fonts the same way we find color; using our favorites of lots of googling. I always gravitate towards fonts.google.com. Generally, it is nice to use these online fonts because they are free and you don’t have to embed/ship them if you want to share your slides with others.\nOnce we are in here to can search around, looking for a font you like. For these slides, I’m going with Manrope for the text, and IBM Plex Serif for the headers. You must find a legible font, with a couple of styles and bold/italics support. This is going to make your life a lot easier once you get going.\nTo use “select” these fonts for use, you click on these links for each font type combination.\nThen you click this button to have a sidebar menu pop up.\nThis menu lets you select and deselect the fonts you have selected. When you are done, you can go to the “Use on the web” section, and click @import.\nAnd you want to copy the code inside the &lt;style&gt; tags. We are now ready to apply these fonts to our slides!",
    "crumbs": [
      "Theming",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Fonts</span>"
    ]
  },
  {
    "objectID": "fonts.html#applying-fonts",
    "href": "fonts.html#applying-fonts",
    "title": "3  Fonts",
    "section": "3.2 Applying Fonts",
    "text": "3.2 Applying Fonts\nStart by adding the @import calls we found in the previous section. This should again go into the scss:defaults section of the .scss file. to modify the font we have 2 sass variables. First, we have $font-family-sans-serif to modify the general text, and $presentation-heading-font to modify the headers. Applying these changes gives us the following .scss file\n/*-- scss:defaults --*/\n$theme-darkblue: #01364C;\n$theme-blue: #99D9DD;\n$theme-white: #F7F8F9;\n$theme-yellow: #F4BA02;\n\n@import url('https://fonts.googleapis.com/css2?family=IBM+Plex+Serif:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;1,100;1,200;1,300;1,400;1,500;1,600;1,700&display=swap');\n@import url('https://fonts.googleapis.com/css2?family=Manrope:wght@200;300;400;500;600;700;800&display=swap');\n\n$body-bg: $theme-darkblue;\n$body-color: $theme-white;\n$link-color: $theme-blue;\n$presentation-heading-color: lighten($theme-blue, 15%);\n\n$font-family-sans-serif: 'Manrope', sans-serif;\n$presentation-heading-font: 'IBM Plex Serif', serif;\n\n/*-- scss:rules --*/\nWhich when renders results in the following slides.\n\nNotice how the fonts we used allows us to bold the words “finished presentation”.\nAnother thing you sometimes need to change depending on the font is the sizing of the text. The sass variable $presentation-font-size-root controls this, and defaults to 40px. Changing this one variable will affect everything on your slides.\nYou can also change the code font, this should ideally be a monospaced font. This is done using the $font-family-monospace sass variable.\nmake sure we talk about ordering of font names\nmake sure we talk about using a local font\n\nyou can download,\ndownload speed\noffline usage\n\ntalk about selecting the right weights you need\ntalk about font pairing websites https://www.google.com/search?q=font+pairings&client=firefox-b-1-d&sca_esv=60b0148d47b8e4e6&sxsrf=AE3TifOwW7wf5D2KR8IfZet2isXrNaU86g%3A1751754965092&ei=1ahpaK62BbjekPIP1_2NmQw&oq=font+par&gs_lp=Egxnd3Mtd2l6LXNlcnAiCGZvbnQgcGFyKgIIADILEAAYgAQYkQIYigUyCxAAGIAEGJECGIoFMgUQABiABDIFEAAYgAQyBRAAGIAEMgUQABiABDIFEAAYgAQyBRAAGIAEMgUQABiABDIHEAAYgAQYCkilJFDoEljHGnADeAGQAQCYAYMBoAGjBaoBAzcuMbgBA8gBAPgBAZgCC6AC1AXCAgoQABiwAxjWBBhHwgINEAAYgAQYsAMYQxiKBcICChAjGIAEGCcYigXCAgoQABiABBhDGIoFwgIOEAAYgAQYsQMYgwEYigXCAg0QABiABBixAxgUGIcCwgINEAAYgAQYsQMYQxiKBcICCBAAGIAEGLEDwgIKEAAYgAQYFBiHApgDAIgGAZAGCpIHBDEwLjGgB-s6sgcDNy4xuAfHBcIHBTAuMy44yAcj&sclient=gws-wiz-serp",
    "crumbs": [
      "Theming",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Fonts</span>"
    ]
  },
  {
    "objectID": "fonts.html#use-fonts-with-ligatures",
    "href": "fonts.html#use-fonts-with-ligatures",
    "title": "3  Fonts",
    "section": "3.3 Use fonts with ligatures",
    "text": "3.3 Use fonts with ligatures\nI just added some new code to a slide\n\nand this code uses some multi-character symbols like != and |&gt;. These and many like them are common all over the different programming languages, so much so that people have created special fonts with ligatures to make them prettier.\nOne such font is FiraCode.\n\nAnd we can add these types of fonts to our slides as well! Start by downloading the font from the site, and copy over a .woff and .woff2 file to your slide directory. I selected FiraCode-Regular.woff and FiraCode-Regular.woff2.\nIn the /*-- scss:defaults --*/ part of our .scss file, we are going to add the following code. This is done to register the font family from the files we have included and to have it selected for use for monospace fonts.\n@font-face {\n    font-family: 'FiraCode';\n    src: url('../../../../../FiraCode-Regular.woff2') format('woff2'),\n         url('../../../../../FiraCode-Regular.woff') format('woff');\n}\n\n$font-family-monospace: 'FiraCode';\nYou might have noticed some ugliness with the ../../../../../s. To my knowledge, this is the best way of using a local font-face from a file.\nWith all of that, we now have beautiful ligatures",
    "crumbs": [
      "Theming",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Fonts</span>"
    ]
  },
  {
    "objectID": "theme.html",
    "href": "theme.html",
    "title": "5  Theme",
    "section": "",
    "text": "5.1 What is a variant?\nThe built in themes are a great place to look for inspiration.\nThis is also a perfect place to start looking for inspiration. using these themes with one or two modifications might get you all the way where you want to go. It is in general a good idea to look for inspiration in other people’s work.\nThis way you can have black/white variants, white/red/blue, or any number of different styles. If you are familiar with xaringan you have seen an inverse theme variant already.\nWhen we are slidecrafting, and you start having many slides. It can be helpful to bucket them into fewer types of slides. This way you can reuse the same style many times with minimal copy-pasting.\nUsing colors to create multiple variants of the same theme allows us to quickly add similar looking, yet different styles. The inverse theme variant of {xaringan} was a dark grey background slide, that accompanied the white background themed default. I and many other people found this inverse theme helpful for creating a break in slides. Typically using it as a section break or a background on which to show a quote.\nYou can also imagine having a couple of more similar theme variants that are used to denote theory/practice, idea/execution, pros/cons. The opportunities are endless, and we are not limited to only 2. I have in the past used themes that slowly changes colors as the slides progressed through the topics.",
    "crumbs": [
      "Theming",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Theme</span>"
    ]
  },
  {
    "objectID": "theme.html#the-scss-basics",
    "href": "theme.html#the-scss-basics",
    "title": "5  Theme",
    "section": "5.2 The SCSS basics",
    "text": "5.2 The SCSS basics\nFortunately, adding this behavior in quarto revealjs slides. We need 2 things:\n\nMark slides that have each theme variant\ninclude css/scss to style each theme\n\nIn our .qmd document we can denote each slide as a class with the following syntax\n## Slide\n\n## Slide {.variant-one}\n\n## Slide {.variant-two}\nthis gives the slides the corresponding css class which we can create styles for. Notice how the first slide doesn’t have a variant specified. Depending on your usage, it is easier to have a good base style, and only use {.class} to specify when you want a different class.\ncreate a .scss file and add it to the themes in the yaml section\nformat:\n  revealjs:\n    theme: [default, styles.scss]\nAnd in the .scss file, we add the boilerplate information.\n/*-- scss:defaults --*/\n\n/*-- scss:rules --*/\nUnder the /*-- scss:rules --*/ section we can now specify all the css rules we want. And we do this by prefixing .variant to each style. As an example, if we want to change the color of the text we use .variant-one {color: blue;}, or the link color .variant-one a {color: green;}.\nYou can quite quickly end up making many changes. And this is where I find it helpful to use scss nesting. Nesting allows us to rewrite\n\n.variant-one {\n  color: #d6d6d6;\n}\n\n.variant-one h1, h2, h3 {\n  color: #f3f3f3;\n}\n\n.variant-one a {\n  color: #00e0e0;\n}\n\n.variant-one p code {\n  color: #ffd700;\n}\nas\n.variant-one {\n  color: #d6d6d6;\n  h1, h2, h3 {\n    color: #f3f3f3;\n  }\n\n  a {\n    color: #00e0e0;\n  }\n\n  p code {\n    color: #ffd700;\n  }\n}\nI find it quite readable and I encourage you to follow the link and read more about it! Using this syntax, having multiple different variants is quite effortless, and many IDEs will help highlight and collapse this type of syntax.\n.variant-one {\n  color: #d6d6d6;\n  h1, h2, h3 {\n    color: #f3f3f3;\n  }\n\n  a {\n    color: #00e0e0;\n  }\n\n  p code {\n    color: #ffd700;\n  }\n}\n\n.variant-two {\n  color: #a6a6d6;\n  h1, h2, h3 {\n    color: #222222;\n  }\n\n  a {\n    color: #f22341;\n  }\n\n  p code {\n    color: #ff00ff;\n  }\n}\nAnd that is all that is needed! I have taken the liberty to create two themes to show case how this is done in practice:\nhttps://github.com/EmilHvitfeldt/quarto-revealjs-inverse\n\nhttps://github.com/EmilHvitfeldt/quarto-revealjs-seasons",
    "crumbs": [
      "Theming",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Theme</span>"
    ]
  },
  {
    "objectID": "theme.html#what-is-a-slide-theme",
    "href": "theme.html#what-is-a-slide-theme",
    "title": "5  Theme",
    "section": "5.3 What is a slide theme?",
    "text": "5.3 What is a slide theme?\nThe inspiration for this style of slidecraft isn’t anything new. If you have used conventional slide-making tools you have seen a dropdown menu before\n\nWith these menus, you can swiftly select the style of slide you intend to write and fill in the content. I find that for some presentations that I all I need.\nBelow is one such theme I created (it is a real revealjs slide deck, touch and advance the slides)\n\n\n\n  Github    Website \n\nInstead of carefully managing the style of all the elements of each slide. They all have an overall slide theme that controls all the content on the slide. This controls colors and sizes but can go further and control backgrounds and even the positioning of elements.\nTake .theme-section1 as an example. Not only are the text and colors modified. The text region is being modified such that the text isn’t going to overlap with the globe on the right. Setting this up beforehand is quite nice. While the backgrounds might seem complicated, they are all SVGs, but you can use any other type of image or none at all.\nOnce you have created the theme, your slides will look like this:\n## Happy slides {.theme-title1 .center}\n\n## Fancy Section {.theme-section3 .center}\n\n### Less Fancy Subtitle\n\n## Funny title {.theme-slide1}\n\nContent\n\n## Exciting title {.theme-slide2}\n\nContent\n\n## Sad title {.theme-slide3}\n\nContent\nEach slide will have minimal CSS, just one or two classes specified on the slide level.",
    "crumbs": [
      "Theming",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Theme</span>"
    ]
  },
  {
    "objectID": "theme.html#how-to-create-your-own",
    "href": "theme.html#how-to-create-your-own",
    "title": "5  Theme",
    "section": "5.4 How to create your own",
    "text": "5.4 How to create your own\nWe will assume that we start our project the same way as we did in previous blog posts. What we will be doing is creating several CSS classes. I find it easier to prefix all of them with .theme- but that is not a requirement. We will also be using the feature that Sass lets us create nesting rules css.\nWe start with a simple class rule\n.theme-slide1 {\n}\nif we are following my advice on creating css color palettes then we can use those to specify header colors\n.theme-slide1 {\n  h3 {\n    color: $theme-blue; // or #5CB4C2\n  }\n}\nAnd we can specify anything want in here. Note that anything inside h3 applies to all h3 headers in .theme-slide1 slides.\n.theme-slide1 {\n  h3 {\n    color: $theme-blue; // or #5CB4C2\n    font-size: 2em;\n  }\n}\nWe could specify specific background colors\n.theme-slide1 {\n  background-color: #E1E8EB\n  h3 {\n    color: $theme-blue; // or #5CB4C2\n    font-size: 2em;\n  }\n}\nOr we could specify background images, for reasons I don’t want to get into, this is the way to include an image nicely. With ../../../../../assets/slide1.svg being a valid path to the slides. You may have to modify the number of ../ for this to work\n.theme-slide1 {\n  &:is(.slide-background) {\n    background-image: url('../../../../../assets/slide1.svg');\n    background-size: cover;\n    background-position: center;\n    background-repeat: no-repeat;\n  }\n  h3 {\n    color: $theme-blue; // or #5CB4C2\n    font-size: 2em;\n  }\n}\ndepending on your slides you might have repeated styles a lot. Sass has a way to help us with @mixin and @include. You can create a @mixin with several styles, and then instead of copying around all the styles, you can @include the mixin for the same effect. Using this we now have the following\n@mixin background-full {\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n}\n\n.theme-slide1 {\n  &:is(.slide-background) {\n    background-image: url('../../../../../assets/slide1.svg');\n    @include background-full;\n  }\n  h3 {\n    color: $theme-blue; // or #5CB4C2\n    font-size: 2em;\n  }\n}\nLastly, if you are using images the way I’m using them, you will need to change the text regions to avoid text overlapping with the background image, we can use the margin- rules for that\n@mixin background-full {\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n}\n\n.theme-slide1 {\n  &:is(.slide-background) {\n    background-image: url('../../../../../assets/slide1.svg');\n    @include background-full;\n  }\n  h3 {\n    color: $theme-blue; // or #5CB4C2\n    font-size: 2em;\n  }\n  h2, h3, h4, h5, p, pre {\n    margin-left: 100px;\n  }\n}\nI hope you can see that with this style of slidecrafting, the skies the limit. The style sheet for the above example can be found here.",
    "crumbs": [
      "Theming",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Theme</span>"
    ]
  },
  {
    "objectID": "theme.html#more-examples",
    "href": "theme.html#more-examples",
    "title": "5  Theme",
    "section": "5.5 More Examples",
    "text": "5.5 More Examples\nBelow is another theme, following very closely the construction of the previous\n\n\n\n  Github    Website    Scss file \n\nAnother approach to creating these styles of themes is to use Lua to further expand the capabilities of the slides\n\n\n\n  Github    Website    Lua file",
    "crumbs": [
      "Theming",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Theme</span>"
    ]
  },
  {
    "objectID": "scss.html",
    "href": "scss.html",
    "title": "6  CSS/SCSS",
    "section": "",
    "text": "6.1 Using CSS Classes\nThe last tip for this blog post is the idea of using CSS classes, which is a quick and powerful way to add styling to your slides.\nRemember how we have 2 highlighting colors? We should have a way to apply these colors in our slides. For starters let us add a way to turn text these colors. Below are two CSS classes, named .blue and .yellow, that change the color and make the text bold with font-weight: bold;. Note that we need to put these classes into the scss:rules section.\nNow that we have our classes defined, you can either apply them using the visual editor in RStudio. Start by highlighting the text you want to apply the class to\nClick “Format” and select “Span…” This will only apply the changes to the highlighted words, instead of the whole paragraph.\nAnd then write in the class name in the “Classes” field. We see the word yellow by using the class “.yellow”.\nWe can also apply these changes in the source editor by using the [text]{.class} syntax. I added (slightly excessive) highlighting to a couple of words. See below\nAnd we get the following slide\nCSS classes were a game changer for my slide-making. It is a little bit more manual, but if you can write the CSS you can apply it to your slides which IMO is a super powerful tool.\nThere are also changes where you just want to modify the CSS directly, these changes should also be applied in the scss:rules section. For example, in our example so far, we have used the blue color both to color the links, and as a highlighting color. This is very confusing, so let us make sure that all links are underlined. We can make this happen by adding.\nNote that CSS rules that target Reveal content generally need to use the .reveal .slide prefix to successfully override the theme’s default styles.\nAnd the changes have been applied.",
    "crumbs": [
      "Theming",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>CSS/SCSS</span>"
    ]
  },
  {
    "objectID": "scss.html#using-css-classes",
    "href": "scss.html#using-css-classes",
    "title": "6  CSS/SCSS",
    "section": "",
    "text": "/*-- scss:rules --*/\n\n.blue {\n  color: $theme-blue;\n  font-weight: bold;\n}\n\n.yellow {\n  color: $theme-yellow;\n  font-weight: bold;\n}\n\n\n\n\n\n\n\n[Quarto]{.blue} enables you to weave together [content]{.yellow} and [executable code]{.yellow} into a **finished presentation**. To learn more about [Quarto]{.blue} presentations see &lt;https://quarto.org/docs/presentations/&gt;.\n\n\n\n\n\n.reveal .slide a {\n  text-decoration: underline;\n}",
    "crumbs": [
      "Theming",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>CSS/SCSS</span>"
    ]
  },
  {
    "objectID": "scss.html#using-maps-to-store-theme-colors",
    "href": "scss.html#using-maps-to-store-theme-colors",
    "title": "6  CSS/SCSS",
    "section": "6.2 Using Maps to store theme colors",
    "text": "6.2 Using Maps to store theme colors\nBefore I would have specified a color palette theme as\n$theme-red: #FA5F5C;\n$theme-blue: #394D85;\n$theme-darkblue: #13234B;\n$theme-yellow: #FFF7C7;\n$theme-white: #FEFEFE;\nBut using a map it turns into the following\n$colors: (\n  \"red\": #FA5F5C,\n  \"blue\": #394D85,\n  \"darkblue\": #13234B,\n  \"yellow\": #FFF7C7,\n  \"white\": #FEFEFE\n);\n\n\n\n\n\n\nNote\n\n\n\nThere is a difference between (key: value) and (\"key\": value) in SASS. For consistency, I also use quoted strings as the keys in a map.\n\n\nInstead of having multiple values representing our colors we now just have one $colors. By themselves, maps aren’t valid CSS and don’t do anything once the SASS compiles. The next sections will show how we can use these maps more efficiently than my previous approach.",
    "crumbs": [
      "Theming",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>CSS/SCSS</span>"
    ]
  },
  {
    "objectID": "scss.html#using-functions-to-pull-out-theme-colors",
    "href": "scss.html#using-functions-to-pull-out-theme-colors",
    "title": "6  CSS/SCSS",
    "section": "6.3 Using Functions to pull out theme colors",
    "text": "6.3 Using Functions to pull out theme colors\nWe where using these colors to change a lot of things, including the major Sass Variables revealjs sass variables. Before we used a map, it would look something like this:\n$body-bg: $theme-yellow;\n$link-color: $theme-blue;\n$code-color: $theme-blue;\n$body-color: $theme-darkblue;\nbut we can’t do that directly with a map. There are built-in functions to extract values from a map, namely the function map-get(). Using that we can rewrite the above as\n$body-bg: map-get($colors, \"yellow\");\n$link-color: map-get($colors, \"blue\");\n$code-color: map-get($colors, \"blue\");\n$body-color: map-get($colors, \"darkblue\");\nAnd while that is all good, I find it a little nicer to have a helper function to do this.\nFunctions in SASS are written as below. You can use as many arguments as you want.\n@function name($arg1, $arg2) {\n  @return $arg1 + $arg2;\n}\nThe helper function I wrote is a light wrapper around map-get() to avoid having to write $colors.\n@function theme-color($color) {\n  @return map-get($colors, $color);\n}\nAnd we now have the final rewrite.\n$body-bg: theme-color(\"yellow\");\n$link-color: theme-color(\"blue\");\n$code-color: theme-color(\"blue\");\n$body-color: theme-color(\"darkblue\");\n\n\n\n\n\n\nNote\n\n\n\nNote that we are using theme-color(\"yellow\") instead of theme-color(yellow) because we used quoted strings in the map. Using unquoted strings all around gave me false positives in my IDE as it interpreted yellow inside theme-color() as #FFFF00 instead of my theme value.",
    "crumbs": [
      "Theming",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>CSS/SCSS</span>"
    ]
  },
  {
    "objectID": "scss.html#using-each-to-automatically-create-classes",
    "href": "scss.html#using-each-to-automatically-create-classes",
    "title": "6  CSS/SCSS",
    "section": "6.4 Using @each to automatically create classes",
    "text": "6.4 Using @each to automatically create classes\nTo add a splash of color, or as used in highlighting, I would create a lot of CSS classes like so:\n.text-red {\n  color: $theme-red;\n}\n.text-yellow {\n  color: $theme-yellow;\n}\n.text-blue {\n  color: $theme-blue;\n}\n\n.bg-red {\n  background-color: $theme-red;\n}\n.bg-yellow {\n  background-color: $theme-yellow;\n}\n.bg-blue {\n  background-color: $theme-blue;\n}\nWhich is all fine and dandy until you also want a class for underlining. It becomes a lot of copy-pasting and changing a couple of names. And that is not to mention the trouble you run into when you decide to add a new color into the mix halfway through your slides.\nThis is when I discovered interpolation and the moment I realized maps were worth it. Interpolation is done by using #{} in some code, meaning that if $favorite-color: \"blue\" then .text-#{$favorite-color} {} turns into .text-blue {}. SASS provides the action @each to loop over all the key and value pairs of our map. So we can rewrite the creation of the above classes as this:\n@each $name, $color in $colors {\n  .text-#{$name} {\n    color: $color;\n  }\n\n  .bg-#{$name} {\n    background-color: $color;\n  }\n}\nAnd this is the beauty of maps. If I want to add a new color to my slides, I just have to add it to the $colors map. If I want to add a new set of classes, I just have to write it once inside the @each statement.",
    "crumbs": [
      "Theming",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>CSS/SCSS</span>"
    ]
  },
  {
    "objectID": "scss.html#using-mixin-to-avoid-repeating-code",
    "href": "scss.html#using-mixin-to-avoid-repeating-code",
    "title": "6  CSS/SCSS",
    "section": "6.5 Using @mixin to avoid repeating code",
    "text": "6.5 Using @mixin to avoid repeating code\nWith the following code\n@mixin background-full {\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n}\n\n.theme-slide1 {\n  &:is(.slide-background) {\n    background-image: url('../../../../../assets/slide1.svg');\n    @include background-full;\n  }\n}\n.theme-slide2 {\n  &:is(.slide-background) {\n    background-image: url('../../../../../assets/slide2.svg');\n    @include background-full;\n  }\n}\n.theme-slide3 {\n  &:is(.slide-background) {\n    background-image: url('../../../../../assets/slide3.svg');\n    @include background-full;\n  }\n}\nCopy-pasting this around when you have 10-15 images is such a pain. But as you properly have noticed, interpolation would be a perfect solution to this problem, and you would be correct! We use a @mixin to create to create a way to create many classes:\n@mixin theme-slide($number) {\n  .theme-slide#{$number} {\n    &:is(.slide-background) {\n      background-image: url('../../../../../assets/slide#{$number}.svg');\n      @include background-full;\n    }\n  }\n}\n\n@include theme-slide(1);\n@include theme-slide(2);\n@include theme-slide(3);\nIt becomes quite a bit tighter! But we can do better because SASS also has @for loops.\n@mixin theme-slide($number) {\n  .theme-slide#{$number} {\n    &:is(.slide-background) {\n      background-image: url('../../../../../assets/slide#{$number}.svg');\n      @include background-full;\n    }\n  }\n}\n\n@for $i from 1 through 3 {\n  @include theme-slide($i);\n}\nyou can now add more background images with ease as long as you are careful when naming them.",
    "crumbs": [
      "Theming",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>CSS/SCSS</span>"
    ]
  },
  {
    "objectID": "scss.html#using-nested-loops-to-create-classes",
    "href": "scss.html#using-nested-loops-to-create-classes",
    "title": "6  CSS/SCSS",
    "section": "6.6 Using nested loops to create classes",
    "text": "6.6 Using nested loops to create classes\nIn our first example, I want a fun gradient shadow/highlight effect for text. We can get that effect using something like following\nbackground-image: linear-gradient(90deg, yellow, blue);\nbackground-size: 100% 42%;\nbackground-repeat: no-repeat;\nbackground-position: 0 85%;\nwidth: fit-content;\nI want it to work on both inline text and as a way to handle the header, the selectors for that would be span.my-class and .my-class &gt; h2 respectively.\nspan.my-class, .my-class &gt; h2 {\n  background-image: linear-gradient(90deg, yellow, blue);\n  background-size: 100% 42%;\n  background-repeat: no-repeat;\n  background-position: 0 85%;\n  width: fit-content;\n}\nAnd them we fill in the rest, using the @each command twice nestedly over a map of colors.\n/*-- scss:defaults --*/\n\n$colors: (\n  \"red\": #FFADAD, \n\"orange\": #FFD6A5, \n  \"yellow\": #FDFFB6, \n  \"blue\": #aad2e7, \n  \"purple\":#b4addd\n);\n\n/*-- scss:rules --*/\n\n@each $name1, $col1 in $colors {\n  @each $name2, $col2 in $colors {\n    span.hl-#{$name1}-#{$name2}, .hl-#{$name1}-#{$name2} &gt; h2 {\n      background-image: linear-gradient(90deg, $col1, $col2);\n      background-size: 100% 42%;\n      background-repeat: no-repeat;\n      background-position: 0 85%;\n      width: fit-content;\n    }\n  }\n}\nI know we are creating some non-interesting classes such as .hl-yellow-yellow but for what we are doing, the tradeoff between avoiding them and how little it impacts us to have them. I think it is a worthwhile tradeoff.\n\n\n\n\n\n\nImportant\n\n\n\nThe slides in this post are interactive, advance them to see the other classes.\n\n\n\n\nqmd scss\n\n\n\n\n\n\nNote\n\n\n\nYou don’t need these compound classes for everything. For example, the class .hl-green-bold isn’t going to be useful as you could just as easily create .hl-green and .bold separately. This trick works best when two elements are used together in a tightly coupled way, such as in gradients.\n\n\nFor our second example, we are continuing with the gradients, but instead trying to apply them to the background. My goal was to add a gradient line to the right side of the slide.\nI was able to create that effect, by layering 2 gradients on top of each other. The first gradient contained the two colors I was interested in, and the names of the class. The second layer, which I placed on top, goes from white to transparent. I set up the transition between those two colors to be super sharp, resulting in the effect you see below\n\n\nqmd scss\nsince we are doing something interesting, we could also have used a separate $colors map just for this effect to not interfere with what else we are doing.",
    "crumbs": [
      "Theming",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>CSS/SCSS</span>"
    ]
  },
  {
    "objectID": "elements.html",
    "href": "elements.html",
    "title": "7  Elements",
    "section": "",
    "text": "7.1 Showing quarto code\nThis one isn’t as much a slidecrafting tip, as it is a quarto tip! If you are showing how to do something in Quarto using Quarto you need this tip. In essence what we are working with are unexcuted blocks.\nAdding a markdown cell around what you want to show. Important to use more ticks than any of the inside cells inside\nusing double curly brackets to indicate that the code block should not be executed. The following code when used in a quarto document will render as shown in the example\nqmd",
    "crumbs": [
      "Content",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Elements</span>"
    ]
  },
  {
    "objectID": "elements.html#showing-quarto-code",
    "href": "elements.html#showing-quarto-code",
    "title": "7  Elements",
    "section": "",
    "text": "```` markdown\nThis is **Quarto** code\n\n```{{python}}\n1 + 1\n```\n````",
    "crumbs": [
      "Content",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Elements</span>"
    ]
  },
  {
    "objectID": "elements.html#changing-plot-backgrounds",
    "href": "elements.html#changing-plot-backgrounds",
    "title": "7  Elements",
    "section": "7.2 Changing plot backgrounds",
    "text": "7.2 Changing plot backgrounds\nPlots and charts are useful in slides. Changing the background makes them fit in. This post will go over how to change the background of your plots to better match the slide background, in a handful of different libraries.\n\n7.2.1 Why are we doing this?\nIf you are styling your slides to change the background color, you will find that most plotting libraries default to using a white background color. If your background is non-white it will stick out like a sore thumb. I find that changing the background color to something transparent #FFFFFF00 is the easiest course of action.\n\nWhy make the background transparent instead of making it match the background?\n\nIt is simply easier that way. There is only one color we need to set and it is #FFFFFF00. This works even if the slide background color is different from slide to slide, or if the background is a non-solid color.\n\n\n7.2.2 base R\nwe don’t have to make any changes to the R code, we can supply the chunk options dev and dev.args for the chunk to \"png\" and list(bg=\"transparent\") respectively and you are good. The chunk will look like this.\n```{r, dev = \"png\", dev.args=list(bg=\"transparent\")}\nplot(mpg ~ disp, data = mtcars, col = factor(am), pch = 16, bty = \"n\")\n```\nYou can also change the options globally using the following options in the yaml.\nknitr:\n  opts_chunk:\n    dev: png\n    dev.args: { bg: \"transparent\" }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7.2.3 ggplot2\nggplot2 are handled the same way as base R plotting, so we don’t have to make any changes to the R code, we can supply the chunk options dev and dev.args for the chunk to \"png\" and list(bg=\"transparent\") respectively and you are good. The chunk will look like this.\n```{r, dev = \"png\", dev.args=list(bg=\"transparent\")}\nlibrary(ggplot2)\nmtcars |&gt;\n  ggplot(aes(disp, mpg, color = factor(am))) +\n  geom_point() +\n  theme_minimal()\n```\nYou can also change the options globally using the following options in the yaml.\nknitr:\n  opts_chunk:\n    dev: png\n    dev.args: { bg: \"transparent\" }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7.2.4 matplotlib\nWith matplotlib, we need to set the background color twice, once for the plotting area, and once for the area outside the plotting area.\nfig = plt.figure()\n# outside plotting area\nplt.axes().set_facecolor(\"#FFFFFF00\")\n\n# your plot\nplt.scatter(x, y, c=colors)\n\n# sinde plotting area\nfig.patch.set_facecolor(\"#FFFFFF00\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7.2.5 seaborn\nFor seaborn, we also set it twice, both of them in set_style()\nsns.set_style(rc={'axes.facecolor':'#FFFFFF00', \n                  'figure.facecolor':'#FFFFFF00'})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7.2.6 Source Document\nThe above was generated with this document.\nsource document",
    "crumbs": [
      "Content",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Elements</span>"
    ]
  },
  {
    "objectID": "elements.html#plot-sizing",
    "href": "elements.html#plot-sizing",
    "title": "7  Elements",
    "section": "7.3 Plot sizing",
    "text": "7.3 Plot sizing\nPlots and charts are useful in slides. But we need to make sure they are sized correctly to be as effective as possible.\n\n7.3.1 auto-stretch option\nRevealjs slides default to having the option auto-stretch: true, this ensures that figures always fit inside the slide. You can turn it off globally like this.\nformat:\n  revealjs:\n    auto-stretch: false\nor on a slide-by-slide basis by adding the .nostretch class to the slide.\n## Slide Title {.nostretch}\nWe see how they affect sizing in the following slides first with the default, and second with .nostretch.\n\n\nBy themselves, they look pretty similar. One occasion where you really notice the difference is when there are other elements on the slide. auto-stretch makes sure the image fits by making the image smaller as seen below.\n\n\n\n\n7.3.2 Sizing Options\nWhen sizing plots we need to remember that we have to deal with two kinds of sizes. First is the size of the actual file on disk, this is controlled using out-width and out-height. Next is how big the image is supposed to be in the document, which is controlled using fig-width, fig-height, and/or fig-asp. Lastly, you can control the location using fig-align and the resolution using fig-dpi.\nAll of these numbers will change depending on whether you have a title or other elements on your slides, what fonts you use, and the aspect ratio of the slides themselves.\n\n7.3.2.1 out-width, out-height\nSetting these options affects the size of the resulting image on disk. If they are set smaller than usual, we get an image that doesn’t take up the whole screen.\n```{r}\n#| out-width: 6in\n#| out-height: 3.5in\n```\n\n\nI don’t find myself using these options much as I tend to want images that take up most of the space, but they are useful to know.\n\n\n\n7.3.3 fig-width, fig-height\nI end up using fig-width and fig-height the most out of the options shown in this blog post. I find that the default values are too high, making the text on the plot too small for the viewer to see. Especially for an in-person audience.\nBelow is the same chart 4 times with different value pairs for fig-width and fig-height. notice how the default values appear to be around fig-width: 9 and fig-height: 5.\n\n\n\n\nAll of the above figures have roughly the same aspect ratios, but if you want others you just specify different values. Like this square chart below.\n\n\n\n7.3.4 fig-asp\nYou might have noticed that the ratios shown in the last section weren’t identical. Because unless you deal with 1-2 or 1-1 ratios you are going to get decimals very fast. And you have to recalculate small things over and over again. This is why fig-asp is amazing. Simply determine the aspect ratio between the height and width, set that as the fig-asp and then you just have to set one of fig-height or fig-width. Is it too small? increase fig-height and keep fig-asp the same. is it too big? decrease fig-height and keep fig-asp the same.\n\n\n\n\n7.3.5 fig-align\nUnless your chart fits fully inside the slide then it tends to be left aligned, you can change that with fig-align, setting it to left, center or right.\n\n\n\n\n\n7.3.6 fig-dpi\nLastly, something you might need to worry about is the Dots Per Inch (DPI) specified by fig-dpi. This is a measure of resolution in your chart. If you see your chart becoming a little blurry, increase the dpi until it isn’t anymore. Note that dpi will result in larger file sizes, so only change if you have to.\n\n\n\n\n7.3.7 Make work with columns\neven if you set the option globally, you will have to make slide-by-slide adjustments, such as with charts in .columns. Below is one example of how we can modify the fig-asp to make it look decent in a column layout.\n\n\n\n7.3.8 Source Document\nThe above was generated with this document.\nsource document",
    "crumbs": [
      "Content",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Elements</span>"
    ]
  },
  {
    "objectID": "elements.html#style-menu-button",
    "href": "elements.html#style-menu-button",
    "title": "7  Elements",
    "section": "7.4 Style menu button",
    "text": "7.4 Style menu button\nThe menu button you see in the lower left-hand side of the slide. Styling it can be done by setting the $link-color sass variable. If you want a different icon, or have it colored differently than $link-color you need to specify it directly as the color is hardcoded into the svg. The icon is specified as the background image of .reveal .slide-menu-button .fa-bars::before.\n.reveal .slide-menu-button .fa-bars::before {\nbackground-image: url('data:image/svg+xml,&lt;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"rgb(42, 118, 221)\" class=\"bi bi-list\" viewBox=\"0 0 16 16\"&gt;&lt;path fill-rule=\"evenodd\" d=\"M2.5 12a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5z\"/&gt;&lt;/svg&gt;') !important;\n}\nTthe color is specified by the fill=\"rgb(42, 118, 221)\" part of the svg. But since this is an image, we can use whatever image we want.\n.reveal .slide-menu-button .fa-bars::before {\nbackground-image: url('https://cdn-icons-png.flaticon.com/512/2163/2163350.png') !important;\n}\n\n\nqmd scss",
    "crumbs": [
      "Content",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Elements</span>"
    ]
  },
  {
    "objectID": "layout.html",
    "href": "layout.html",
    "title": "8  Layout",
    "section": "",
    "text": "8.1 Pulling things left and right\nUsing multiple columns is a nice way to split up the content of your slides. I use it so much that I have a snippet to save time since I use it so much. It works great for side-by-side comparisons as well. This is done using the following syntax. We use the width attribute to determine the width of each of the columns.\nbut you can use it in quite a few ways beyond this! Firstly, each column is by itself a div, so you can style it directly. Such as making the right column have the right aligned text.\nThe structure of columns doesn’t require that we just use 2 columns. You can do as many columns as you want, but generally, you will have a hard time using more than 4.\nAnother way I like to use columns is by keeping one of them empty. This way provides a fast and easy way to add space or put text in specific locations.\nqmd",
    "crumbs": [
      "Content",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Layout</span>"
    ]
  },
  {
    "objectID": "layout.html#pulling-things-left-and-right",
    "href": "layout.html#pulling-things-left-and-right",
    "title": "8  Layout",
    "section": "",
    "text": ":::: {.columns}\n\n::: {.column width=\"40%\"}\nLeft column\n:::\n\n::: {.column width=\"60%\"}\nRight column\n:::\n\n::::\n\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\nLeft column\n:::\n\n::: {.column width=\"50%\" style=\"text-align: right;\"}\nRight column\n:::\n\n::::\n\n\n\n:::: {.columns}\n\n::: {.column width=\"25%\"}\n1st column\n:::\n\n::: {.column width=\"25%\"}\n2nd column\n:::\n\n::: {.column width=\"25%\"}\n3rd column\n:::\n\n::: {.column width=\"25%\"}\n4th column\n:::\n\n::::\n\n\n\n:::: {.columns}\n\n::: {.column width=\"30%\"}\n:::\n\n::: {.column width=\"70%\"}\nOnly right side\n:::\n\n::::",
    "crumbs": [
      "Content",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Layout</span>"
    ]
  },
  {
    "objectID": "layout.html#r-fit-text",
    "href": "layout.html#r-fit-text",
    "title": "8  Layout",
    "section": "8.2 r-fit-text",
    "text": "8.2 r-fit-text\nAnother quick way to change the layout of your slide is to let the text take up the entire slide real estate. We can do this using the r-fit-text class using the following syntax. This will make the text so big that it takes up all the horizontal space on the slide.\n::: r-fit-text\nBig Text\n:::\n\n\nThis works well combined with the center class, which makes sure the text appears in the center vertically on the slide.\n## {.center}\n\n::: r-fit-text\nThis fits perfectly!\n:::\n\n\nOne thing about using r-fit-text is that it applies the same text size to all the text inside it, so when you use it across multiple lines, you won’t get the same effect.\n::: r-fit-text\nThis fits perfectly!\n\nOn two lines\n:::\n\n\nThis can however be fixed, by using a r-fit-text for each line of text.\n::: r-fit-text\nThis fits perfectly!\n:::\n\n::: r-fit-text\nOn two lines\n:::\n\n\nqmd",
    "crumbs": [
      "Content",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Layout</span>"
    ]
  },
  {
    "objectID": "layout.html#using-images",
    "href": "layout.html#using-images",
    "title": "8  Layout",
    "section": "8.3 Using images",
    "text": "8.3 Using images\nUsing images for style is another thing you can do to change the layout. If you don’t have much content on your slides. e.i. just a sentence or two. You could pair that with an image that relays some of the same information. These images will typically not contain content themselves but rather reinforce the content on the slides.\nThere are 3 main ways to include images. Using the basics, using absolute position or as background images.\n\n8.3.1 Basic figures\nThe basic way of adding figures is using the following syntax\n![](holly-mandarich.jpg)\nwhere holly-mandarich.jpg is the path to the image. We can change some options such as adding {fig-align=\"right\"} to the end to change the alignment. But I end up not using this style that much because it is added as content, so it will push other content around, and it adheres to margins which I rarely want for tasks like this.\n\n\nPhoto by Holly Mandarich on Unsplash\nqmd\n\n\n8.3.2 Absolute position\nAbsolute is my favorite way of adding images. It gives me much more control over where the image is located and its size.\nYou use the following syntax:\n![](noelle-rebekah.jpg){.absolute top=0 right=0 height=\"100%\"}\nWhere you can use the following attributes:\n\n\n\nAttribute\nDescription\n\n\n\n\nwidth\nWidth of element\n\n\nheight\nHeight of element\n\n\ntop\nDistance from top of slide\n\n\nleft\nDistance from left of slide\n\n\nbottom\nDistance from bottom of slide\n\n\nright\nDistance from right of slide\n\n\n\nyou need one of left and right and one of bottom and top to give the correct location. I find that just using one of width or height is easier as it doesn’t distort the image. All of these attributes accept all known CSS values, such as pixels, inches, and percentages. All about CSS length for more information.\n\n\nAll images in revealjs default to the following maximum sizes:\nmax-width: 95%;\nmax-height: 95%;\nNo matter how large we set width or height we are overruled by max-width and max-height. We can make the image any size by overruling those. Specifically, we can unset them with style=\"max-height: unset; max-width: unset;\".\nWith some experimentation, we can size the image such that it is where we want it. Notice that we are using negative locations to make this happen as 0 is inside the slide.\n![](noelle-rebekah.jpg){.absolute top=\"-10%\" right=\"-10%\" height=\"120%\" style=\"max-height: unset;\"}\n\n\nPhoto by Noelle Rebekah on Unsplash\nqmd\n\n\n\n\n\n\nWarning\n\n\n\nSince the way that positions are done in revealjs, it can be almost impossible to have the above effect for all aspect ratios. Make it work for the aspect ratio you use, and have peace.",
    "crumbs": [
      "Content",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Layout</span>"
    ]
  },
  {
    "objectID": "layout.html#absolute-position-everything",
    "href": "layout.html#absolute-position-everything",
    "title": "8  Layout",
    "section": "8.4 Absolute position everything",
    "text": "8.4 Absolute position everything\nIt took me too long to realize, but the absolute class can be used on anything!\nYou might have seen the following syntax to place an image anywhere\n![](image1.png){.absolute top=200 left=0 width=\"350\" height=\"300\"}\nBut you are not restricted in using it with images. The following results in the image you see attached:\nI like to use it with text in the following way:\n[python is great]{.absolute bottom=\"45%\" left=\"20%\"}\n\n[and so is R]{.absolute bottom=\"0%\" right=\"0%\"}\n\n\nqmd\n\n8.4.1 Background image\nThe last way to add images, which I highly recommend is the use of background images. And in many ways, it is the simplest one.\nyou specify it on the slide level in the following way:\n## Slide Title {background-image=\"galen-crout.jpg\"}\n\n\nyou can set other options such as background-position and background-repeat but I rarely end up using them.\nI end up not setting a default title and use .absolute to place any content I want where I want it.\n## {background-image=\"galen-crout.jpg\"}\n\n[always explore]{.absolute left=\"50%\" top=\"20%\" style=\"rotate: -10deg;\"}\n\n\nPhoto by Galen Crout on Unsplash\nqmd\nAs we see here, the text positioning can change how the slides are perceived. Both in style and emotion, try to think about how you can incorporate text positioning to maximize engagement.",
    "crumbs": [
      "Content",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Layout</span>"
    ]
  },
  {
    "objectID": "layout.html#overlayed-text-boxes",
    "href": "layout.html#overlayed-text-boxes",
    "title": "8  Layout",
    "section": "8.5 Overlayed Text Boxes",
    "text": "8.5 Overlayed Text Boxes\nWhen using background images, it can be hard to place text on top of it, in a way that that keeps the text readable. This is often an issue with images that are more busy or have colors that match. A simple fix is to overlay a box, and we then add text on you. If we take the first slide here as an example.\n## {background-image=\"tim-marshall.jpg\"}\n\n\nFirst, we try to use .absolute to add some inspiring text. It adds text, but it is not easy to read at all!!\n## {background-image=\"tim-marshall.jpg\"}\n\n::: {.absolute left=\"55%\" top=\"55%\" style=\"font-size:1.8em;\"}\nBe Brave\n\nTake Risks\n:::\n\n\nBut we can expand on this idea, adding a background-color to make it stand out. We also added some padding, otherwise the background would just be slightly bigger than the text itself.",
    "crumbs": [
      "Content",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Layout</span>"
    ]
  },
  {
    "objectID": "layout.html#section",
    "href": "layout.html#section",
    "title": "8  Layout",
    "section": "8.6 ",
    "text": "8.6 \n::: {.absolute left=\"55%\" top=\"55%\" style=\"font-size:1.8em; padding: 0.5em 1em; background-color: rgba(255, 255, 255, .5);\"}\nBe Brave\n\nTake Risks\n:::\n\n\nit already looks quite good! We can make it pop just a little bit more, by adding a backdrop-filter to make it look a little glass-like, adding a box-shadow to make it look a little 3-dimensional, and adding a small border-radius to stop the sharp corners.\n## {background-image=\"tim-marshall.jpg\"}\n\n::: {.absolute left=\"55%\" top=\"55%\" style=\"font-size:1.8em; padding: 0.5em 1em; background-color: rgba(255, 255, 255, .5); backdrop-filter: blur(5px); box-shadow: 0 0 1rem 0 rgba(0, 0, 0, .5); border-radius: 5px;\"}\nBe Brave\n\nTake Risks\n:::\n\n\nPhoto by Tim Marshall on Unsplash\nqmd\nI think this turned out well. There are endless ways to use this. It is quite CSS-heavy work, but I think it is worth it. Note that you are always free to copy an example and modify it to your wants.",
    "crumbs": [
      "Content",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Layout</span>"
    ]
  },
  {
    "objectID": "layout.html#vary-the-type-of-slides",
    "href": "layout.html#vary-the-type-of-slides",
    "title": "8  Layout",
    "section": "8.7 Vary the type of slides",
    "text": "8.7 Vary the type of slides\nThis post has shown a number of ways to place content on your slides. My final advice in this post is to use some of these tips to vary how the content is laid out. It doesn’t have to be over the top, but slight variations can help a slide deck feel fresh.",
    "crumbs": [
      "Content",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Layout</span>"
    ]
  },
  {
    "objectID": "manual-code.html",
    "href": "manual-code.html",
    "title": "9  Manual code",
    "section": "",
    "text": "9.1 Hand-styled code chunks\nWith a little extra effort, you can create highlighted code chunks. This is different than the code highlighting that comes naturally. In this instance, we are creating an unstyled code chunk, and styling part of the code manually with css classes.\nFirst, we write a new css class, I like to call it .mono. The important thing is that we set font-family: monospace;, but we can do other things, like setting the font-size.\nNext, we add our code in a fenced div, with the mono class. you need to use \\ to add leading spaces, and each line ends with 2 spaces to denote newlines\nTaking it to the next step, you can manually change the formatting of functions using css or css classes, library([ggplot2]{style=\"color:purple;\"}) would make ggplot2 purple. This is also a great place to use css classes.\nWe can take it a step further and use fragments to have the code highlighted one bit at a time. Changing the last line to the following\nseperately highlights the code method = \"lm\" then formula = \"y ~ x\" in red and blue.\nqmd",
    "crumbs": [
      "Content",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Manual code</span>"
    ]
  },
  {
    "objectID": "manual-code.html#hand-styled-code-chunks",
    "href": "manual-code.html#hand-styled-code-chunks",
    "title": "9  Manual code",
    "section": "",
    "text": ".mono {\n  font-family: monospace;\n  font-size: 0.9em;\n}\n\n::: mono\nlibrary(ggplot2)\nmtcars |&gt;  \n\\ \\ ggplot(aes(mpg, disp)) +  \n\\ \\ geom_point() +  \n\\ \\ geom_smooth(method = \"lm\", formula = \"y ~ x\")\n:::\n\n\ngeom_smooth([method = \"lm\"]{.fragment .highlight-red}, [formula = \"y ~ x\"]{.fragment .highlight-blue})",
    "crumbs": [
      "Content",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Manual code</span>"
    ]
  },
  {
    "objectID": "asciicast.html",
    "href": "asciicast.html",
    "title": "10  asciicast",
    "section": "",
    "text": "10.1 Without asciicast\nThis chapter celebrates the asciicast R package to showcase rich output.\nWhen R code produces messages with colors or styling, they are typically lost when we write slides\nqmd",
    "crumbs": [
      "Content",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>asciicast</span>"
    ]
  },
  {
    "objectID": "asciicast.html#default-asciicast",
    "href": "asciicast.html#default-asciicast",
    "title": "10  asciicast",
    "section": "10.2 Default asciicast",
    "text": "10.2 Default asciicast\nThis is where the amazing asciicast R package comes into play. {asciicast} takes an R script and turns it into an asciinema cast. We will use the very convenient init_knitr_engine() function to make this as easy as possible.\nWe can add the {asciicast} {knitr} engine by placing the following chunk at the beginning of our document.\n```{r}\nasciicast::init_knitr_engine()\n```\nAnd then we toggle asciicast output by replacing\n```{r}\nlibrary(tidymodels)\n```\nwith\n```{asciicast}\nlibrary(tidymodels)\n```\nWith this change, we get the following output, nicely styled with colors and everything.\n\n\nqmd\n\n\n\n\n\n\nNote\n\n\n\nThe output of asciicast will by default fill the screen horizontally, but for some reason when setting format: revealjs: self-contained: true it doesn’t. All examples use this option for a better blogging experience. You just have to trust me that it looks better without the option.",
    "crumbs": [
      "Content",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>asciicast</span>"
    ]
  },
  {
    "objectID": "asciicast.html#using-startup-to-seed-load-some-packages",
    "href": "asciicast.html#using-startup-to-seed-load-some-packages",
    "title": "10  asciicast",
    "section": "10.3 Using startup to seed, load some packages",
    "text": "10.3 Using startup to seed, load some packages\nThe full list of arguments to asciicast_init_knitr_engine() is as follows\n\nformals(asciicast::init_knitr_engine)\n\n$echo\n[1] FALSE\n\n$same_process\n[1] TRUE\n\n$timeout\n[1] 10\n\n$startup\nNULL\n\n$record_env\nNULL\n\n$echo_input\n[1] TRUE\n\n$interactive\n[1] TRUE\n\n\nI will talk about the 3 I use, which are same_process, echo, and echo_input. The two go together. same_process which defaults to TRUE, does what it says. It determines whether all the asciicast chunks should be in the same process or not. If you want to show things that only happen once a session, you might want to turn this off which is done this way\n```{r}\nasciicast::init_knitr_engine(\n  same_process = FALSE\n)\n```\nand gives the following results\n\n\nqmd\nYou will notice that the code that is being run is included in the asciicast output. This is happening because the default arguments echo = FALSE and echo_input = TRUE. By swapping these options we get the code as normal quarto code, with the output as asciicast\n```{r}\nasciicast::init_knitr_engine(\n  echo = TRUE,\n  echo_input = FALSE\n)\n```\n\n\nqmd\nIt wouldn’t make much sense to set both of these to TRUE as you would have duplication, but there are certainly cases where you want both of these to be FALSE as you just want the output.",
    "crumbs": [
      "Content",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>asciicast</span>"
    ]
  },
  {
    "objectID": "asciicast.html#using-theme-argument",
    "href": "asciicast.html#using-theme-argument",
    "title": "10  asciicast",
    "section": "10.4 Using theme argument",
    "text": "10.4 Using theme argument\nThe output is styled a certain way, and we can change it. At the time of writing, the following 10 premade themes are available.\n\nasciinema\ntango\nsolarized-dark\nsolarized-light\nseti\nmonokai\ngithub-light\ngithub-dark\npkgdown\nreadme\n\nWe can toggle any of these by setting the option asciicast_theme. The below example showcases the \"solarized-light\" theme.\n```{r}\noptions(asciicast_theme = \"solarized-light\")\n```\n\n\nqmd\nIf none of these is what you need, you can use a completely custom theme. I suggest that you modify one of the existing theme\nFor this example, the github-light theme was modified by changing the background to pure white to match the background of the slide, thus having it blend into the slide.\n```{r}\noptions(\n  asciicast_theme = list(\n    black         = c(grDevices::col2rgb(\"#073642\")),\n    red           = c(grDevices::col2rgb(\"#dc322f\")),\n    green         = c(grDevices::col2rgb(\"#859900\")),\n    yellow        = c(grDevices::col2rgb(\"#b58900\")),\n    blue          = c(grDevices::col2rgb(\"#268bd2\")),\n    magenta       = c(grDevices::col2rgb(\"#d33682\")),\n    cyan          = c(grDevices::col2rgb(\"#2aa198\")),\n    white         = c(grDevices::col2rgb(\"#eee8d5\")),\n    light_black   = c(grDevices::col2rgb(\"#002b36\")),\n    light_red     = c(grDevices::col2rgb(\"#cb4b16\")),\n    light_green   = c(grDevices::col2rgb(\"#586e75\")),\n    light_yellow  = c(grDevices::col2rgb(\"#657c83\")),\n    light_blue    = c(grDevices::col2rgb(\"#839496\")),\n    light_magenta = c(grDevices::col2rgb(\"#6c71c4\")),\n    light_cyan    = c(grDevices::col2rgb(\"#93a1a1\")),\n    light_white   = c(grDevices::col2rgb(\"#fdf6e3\")),\n    background    = c(grDevices::col2rgb(\"#ffffff\")),\n    cursor        = c(grDevices::col2rgb(\"#657b83\")),\n    bold          = c(grDevices::col2rgb(\"#657b83\")),\n    text          = c(grDevices::col2rgb(\"#657b83\"))\n  )\n)\n```\n\n\nqmd",
    "crumbs": [
      "Content",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>asciicast</span>"
    ]
  },
  {
    "objectID": "asciicast.html#roundup",
    "href": "asciicast.html#roundup",
    "title": "10  asciicast",
    "section": "10.5 Roundup",
    "text": "10.5 Roundup\nI just recently learned about {asciicast} and I love it. If you know of any other cool tools or packages, please reach out and share them with me!",
    "crumbs": [
      "Content",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>asciicast</span>"
    ]
  },
  {
    "objectID": "fragments.html",
    "href": "fragments.html",
    "title": "11  Fragments",
    "section": "",
    "text": "11.1 Highlight incremental slides\nThe use of incremental lists is a great way to add a little something to a set of slides. It also avoids a wall of text, allowing the presenter to show one bullet at a time. All in all, this is helpful as it can be used to focus the viewers’ attention.\nAs a reminder, we create an incremental list using the following syntax:\nWe can add another class to this div and use it to style it more.\nthen we use this to style our list. Below .current-fragment refers to the last shown item in the list. Setting the color: grey isn’t necessary, but it is a way to downplay the “not-current” items\nThese together yield these slides:\nqmd scss",
    "crumbs": [
      "Interactivity",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Fragments</span>"
    ]
  },
  {
    "objectID": "fragments.html#highlight-incremental-slides",
    "href": "fragments.html#highlight-incremental-slides",
    "title": "11  Fragments",
    "section": "",
    "text": "::: {.incremental}\n- thing 1\n- thing 2\n:::\n\n::: {.incremental .highlight-last}\n- thing 1\n- thing 2\n:::\n\n.highlight-last  {\n  color: grey;\n  .current-fragment {\n    color: #5500ff;\n  }\n}",
    "crumbs": [
      "Interactivity",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Fragments</span>"
    ]
  },
  {
    "objectID": "fragments.html#changing-fragments-with-css",
    "href": "fragments.html#changing-fragments-with-css",
    "title": "11  Fragments",
    "section": "11.2 Changing fragments with CSS",
    "text": "11.2 Changing fragments with CSS\nAt the most fundamental level, a fragment can be split into 3 stages\n\nbefore\ncurrent\nafter\n\ndetermining which stage is handled completely by revealjs using the fragment-index attribute. The way we can make things happen is to apply a different style to each of the 3 stages.\nthe maximal fragment signature is as follows, with fragment-name being the name of the fragment in question. For them to work properly you have to list them in the following order. Which corresponds to before, after, and current.\n.reveal .slides section .fragment.fragment-name {\n}\n\n.reveal .slides section .fragment.fragment-name.visible {\n}\n\n.reveal .slides section .fragment.fragment-name.current-fragment {\n}\n\n\n\n\n\n\nImportant\n\n\n\nThe reason why this ordering is important is because .visible and .current-fragment are triggered at the same time. And because I simplified the order a little too much. There isn’t before, current, and after. Instead, we have always, current, and not-before-current. In essence, they do the same, as long as you order them in this order to make sure they cascade properly.\n\n\nBefore we try to implement a fragment by ourselves, we need to note one thing real quick. Each of these stages is styled a specific way by default. In practice, what this means is that the before style has the following attributes set to make the text invisible:\nopacity: 0;\nvisibility: hidden;\nIf you want the text to be visible before the fragment triggers, simply set these two attributes to unset.\nAnother note I would like to add is that while you are able to modify anything in a fragment, as it is just triggering CSS, you should be careful about position and size. While you might be able to make it work, it is likely to cause a lot of shifting and jittering as elements resize.\n\n\n\n\n\n\nTip\n\n\n\nLooking at the source code for the default fragments gives us a good idea for how different styles of fragments work.",
    "crumbs": [
      "Interactivity",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Fragments</span>"
    ]
  },
  {
    "objectID": "fragments.html#example-1",
    "href": "fragments.html#example-1",
    "title": "11  Fragments",
    "section": "11.3 Example 1",
    "text": "11.3 Example 1\nThis first example illustrates how the different phases work in a fragment. We have thus created an rgb fragment that assigns a different color to each of the 3 phases. We unset both opacity and visibility to have the text appear beforehand. This leaves us with the following fragment:\n.reveal .slides section .fragment.rgb {\n  opacity: unset;\n  visibility: unset;\n  color: red;\n}\n\n.reveal .slides section .fragment.rgb.visible {\n  color: blue;\n}\n\n.reveal .slides section .fragment.rgb.current-fragment {\n  color: green;\n}\nAdvancing and de-advancing(?) the slides showcase how the different classes are applied for fragments.\n\n\nqmd scss\nWorth noting that this single fragment could be rewritten as the following using SCSS nesting.\n.reveal .slides section .fragment.rgb {\n  opacity: unset;\n  visibility: unset;\n  color: red;\n\n  &.visible {\n    color: blue;\n  }\n\n  &.current-fragment {\n    color: green;\n  }\n}",
    "crumbs": [
      "Interactivity",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Fragments</span>"
    ]
  },
  {
    "objectID": "fragments.html#example-2",
    "href": "fragments.html#example-2",
    "title": "11  Fragments",
    "section": "11.4 Example 2",
    "text": "11.4 Example 2\nOne custom fragment I use from time to time is the background highlighted style. And it is very simple, instead of changing the color of the text, it changes the background color. I find that it is a much stronger indication than changing the text itself.\nThis fragment gives us two things. I leave the text visible beforehand. Then it turns the background orange, and after it lightens the background color a little bit.\n$theme-orange: #FFB81A;\n\n.reveal .slides section .fragment.hl-orange {\n  opacity: unset;\n  visibility: unset;\n\n  &.visible {\n    background-color: $theme-orange;\n  }\n\n  &.current-fragment {\n    background-color: darken($theme-orange, 10%);\n  }\n}\nThis once is nice and flexible because it is easy to extend.\n$theme-orange: #FFB81A;\n$theme-yellow: #FFD571;\n$theme-brown: #E2AE86;\n$theme-pink: #FED7E1;\n\n.reveal .slides section .fragment {\n\n  &.hl-orange,\n  &.hl-yellow,\n  &.hl-pink,\n  &.hl-brown {\n    opacity: 1;\n    visibility: inherit\n  }\n\n  &.hl-brown.visible {\n    background-color: $theme-brown;\n  }\n\n  &.hl-brown.current-fragment {\n    background-color: darken($theme-brown, 10%);\n  }\n\n  &.hl-orange.visible {\n    background-color: $theme-orange;\n  }\n\n  &.hl-orange.current-fragment {\n    background-color: darken($theme-orange, 10%);\n  }\n\n  &.hl-yellow.visible {\n    background-color: $theme-yellow;\n  }\n\n  &.hl-yellow.current-fragment {\n    background-color: darken($theme-yellow, 10%);\n  }\n\n  &.hl-pink.visible {\n    background-color: $theme-pink;\n  }\n\n  &.hl-pink.current-fragment {\n    background-color: darken($theme-pink, 10%);\n  }\n}\nAnd we are willing to tap into some scss we can condense it down quite a lot using SCSS loops.\n$colors: (\n  \"orange\": #FFB81A,\n  \"yellow\": #FFD571,\n  \"brown\": #E2AE86,\n  \"pink\": #FED7E1\n);\n\n@each $name, $color in $colors {\n  .reveal .slides section .fragment.hl-#{$name} {\n    opacity: unset;\n    visibility: unset;\n\n    &.visible {\n      background-color: lighten($color, 5%);\n    }\n\n    &.current-fragment {\n      background-color: $color;\n    }\n  }\n}\n\n\nqmd scss",
    "crumbs": [
      "Interactivity",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Fragments</span>"
    ]
  },
  {
    "objectID": "fragments.html#example-3",
    "href": "fragments.html#example-3",
    "title": "11  Fragments",
    "section": "11.5 Example 3",
    "text": "11.5 Example 3\nThe last example included a bit of flair by having the current fragment element be a slightly different color and then changing it after. We can simplify it a bit by not specifying the .current-fragment class.\n$theme-orange: #FFB81A;\n\n.reveal .slides section .fragment.hl-orange {\n  opacity: unset;\n  visibility: unset;\n\n  &.visible {\n    background-color: $theme-orange;\n  }\n}\nThis fragment works more or less the same way as before but doesn’t change color once it is applied. It will be a more appropriate fragment many times.\nThis leads us to our final piece of knowledge in this blog post. We don’t have to fully specify a fragment. We just have to declare how we want it to behave differently, and then the default “stay hidden, then appear” fragment.",
    "crumbs": [
      "Interactivity",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Fragments</span>"
    ]
  },
  {
    "objectID": "fragments.html#fragments-201",
    "href": "fragments.html#fragments-201",
    "title": "11  Fragments",
    "section": "11.6 Fragments 201",
    "text": "11.6 Fragments 201\nWhen a fragment is either shown or hidden reveal.js (the engine that powers our slides) will dispatch an event. This event can be picked up using JavaScript.\nYou will need a little bit of Javascript knowledge, but I found that you don’t need a lot of knowledge to produce useful things for slides. Once your slides are rendered in your browser, you can toggle the developer tools, where you can find a javascript console. This is where I do the work needed.\n\nWe can capture the event using the following snippets of code\nReveal.on('fragmentshown', (event) =&gt; {\n  // event.fragment = the fragment DOM element\n});\nReveal.on('fragmenthidden', (event) =&gt; {\n  // event.fragment = the fragment DOM element\n});\nReveal is the javascript object that powers the whole presentation. To have fun things happening when we use fragments, we need to write some code inside these curly brackets. The first chunk of code runs whenever a fragment appears, and the second runs whenever a fragment disappears. In in this environment, we have access to the event which is the DOM element of fragment div itself as created in our slides. We can take advantage of that in different ways as you will see.\nEvent {\n  \"isTrusted\": false,\n  \"fragment\": \"Node\",\n  \"fragments\": [\"Node\"],\n  \"type\": \"fragmentshown\",\n  \"target\": \"Node\",\n  \"currentTarget\": \"Node\",\n  \"eventPhase\": 2,\n  \"bubbles\": true,\n  \"cancelable\": true,\n  \"defaultPrevented\": false,\n  \"composed\": false,\n  \"timeStamp\": 2259.5,\n  \"srcElement\": \"Node\",\n  \"returnValue\": true,\n  \"cancelBubble\": false,\n  \"NONE\": 0,\n  \"CAPTURING_PHASE\": 1,\n  \"AT_TARGET\": 2,\n  \"BUBBLING_PHASE\": 3\n}\nLast note, you can have multiple of these Reveal.on() statements, as they will trigger one after another. So depending on how you want to organize, both styles are valid.\n// one statement\nReveal.on('fragmentshown', (event) =&gt; {\n  fragment_style_1(event);\n  fragment_style_2(event);\n  fragment_style_3(event);\n});\n\n// multiple statements\nReveal.on('fragmentshown', (event) =&gt; {\n  fragment_style_1(event);\n});\nReveal.on('fragmentshown', (event) =&gt; {\n  fragment_style_2(event);\n});\nReveal.on('fragmentshown', (event) =&gt; {\n  fragment_style_3(event);\n});\nLastly, the way I set up my revealjs slides to do javascript is by setting the include-after-body attribute in the yaml file,\nformat:\n  revealjs:\n    include-after-body: \n      - \"_color.html\"\nand having it point to a file that looks like this:\n&lt;script type=\"text/javascript\"&gt;\n\n&lt;/script&gt;\nthen inside we put my javascript code, which for this blog post will be some Reveal.on() calls.",
    "crumbs": [
      "Interactivity",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Fragments</span>"
    ]
  },
  {
    "objectID": "fragments.html#color-changing",
    "href": "fragments.html#color-changing",
    "title": "11  Fragments",
    "section": "11.7 Color changing",
    "text": "11.7 Color changing\nThis first example is going to be an illustrative example of what we can do and how to do it. And it will thus not be very useful.\nThe first lesson I want to show is that you are not limited to modifying the content inside the fragment. This means that we can actually have empty fragments that modify some other element. So in our document, we could have a slide that looks like this:\n## Color Changing Title Text\n\n::: {.fragment .color}\n:::\nI want to change the color of the header when the fragment triggers. To do that we need two things.\n\nThe color to change it into\nAccess to the header element\n\nThe first part is easy, I found a “random javascript” script online. We start by assigning that to a variable.\nrandom_color = '#'+(Math.random()*0xFFFFFF&lt;&lt;0).toString(16);\nNext, we need to find the header. Remember the Reveal object I mentioned earlier? It has a very handy .getCurrentSlide() method. When run we get the current slide we are on, which is exactly what we need.\nReveal.getCurrentSlide()\n&lt;section id=​\"color-changing-title-text\" class=​\"slide level2 present\" style=​\"display:​ block;​\" data-fragment=​\"-1\"&gt;\n​  &lt;h2&gt;​Color Changing Title Text​&lt;/h2&gt;\n  ​&lt;div class=​\"fragment color\" data-fragment-index=​\"0\"&gt;​&lt;/div&gt;\n​  &lt;div class=​\"quarto-auto-generated-content\"&gt;​&lt;/div&gt;​\n&lt;/section&gt;​\nFrom this, we can get to the title using .querySelector()\n\n\n\n\n\n\nNote\n\n\n\nWe don’t need .querySelectorAll() because by definition there will only be one h2 on a quarto slide using default options.\n\n\nReveal\n  .getCurrentSlide()\n  .querySelector(\"h2\")\n&lt;h2&gt;Color Changing Title Text&lt;/h2&gt;\nWe can then change the color by selecting the style element of the div and updating the color variable.\nReveal\n  .getCurrentSlide()\n  .querySelector(\"h2\")\n  .style\n  .color = random_color;\nAnd that is technically all we need. Put that code inside the Reveal.on() statements, and the color of the header will change each time the fragment is triggered.\nOne thing worth remembering is that this javascript code will run everything a fragment is run. So to limit it, we can make sure it only runs when we want it to. This is why I gave the fragment a .color class. We can use the following if statement to make sure our code only runs when we want it to.\nif (event.fragment.classList.contains(\"color\")) {\n\n}\nWe could stop here. But I want to show a little more with this example. For right the color changes randomly, but we could allow for a little bit of information transfer. HTML has this concept called datasets. Each div can have a data set of information. We should use this to give our fragments more flexibility.\nLuckily it is quite effortless to specify data set values in quarto. Below is the same fragment div as before, but with a data set value named color.\n:::: {.fragment .color data-color=\"orange\"}\n:::\nWe can now on the javascript side pull out this value with ease.\ncolor = event.fragment.dataset.color;\n\n\n\n\n\n\nWarning\n\n\n\nWe are not doing any input checking, so this code will fail silently if you don’t have a color specified in the div.\n\n\nAnd set it the same as before.\nReveal\n  .getCurrentSlide()\n  .querySelector(\"h2\")\n  .style\n  .color = color;\nThis will give us the final fragment code as follows\nReveal.on('fragmentshown', (event) =&gt; {\n  if (event.fragment.classList.contains(\"color\")) {\n random_color = '#'+(Math.random()*0xFFFFFF&lt;&lt;0).toString(16);\n  \n Reveal\n      .getCurrentSlide()\n      .querySelector(\"h2\")\n      .style\n      .color = random_color;\n  }\n});\n\nReveal.on('fragmenthidden', (event) =&gt; {\n  if (event.fragment.classList.contains(\"color\")) {\n color = event.fragment.dataset.color;\n\n Reveal\n      .getCurrentSlide()\n      .querySelector(\"h2\")\n      .style\n      .color = color;\n  }\n});\n\n\nqmd js",
    "crumbs": [
      "Interactivity",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Fragments</span>"
    ]
  },
  {
    "objectID": "fragments.html#scroll-output",
    "href": "fragments.html#scroll-output",
    "title": "11  Fragments",
    "section": "11.8 Scroll output",
    "text": "11.8 Scroll output\nSometimes you run into a situation where you want to interact with an element on a slide. This can happen when you need to scroll or toggle something. While that would be fine to do by hand, it can be hard to do casually, and impossible to do if you are using a clicker.\nScrolling text in a window is one thing that isn’t that hard to do with JavaScript.\nWe will follow the same steps as before.\n\nFind the element we want to show\nFigure out how to scroll it\n\nThe element can again be found using .getCurrentSlide() and querySelector() after a little digging.\nReveal\n  .getCurrentSlide()\n  .querySelector(\".cell-output code\")\nNext, we need to figure out how to scroll it. This can be done using the .scrollTo() method. This function should be passed on to how much we want to scroll and how. As far as I know, this can only be set using pixel values so we have to try a couple of times to get it right. 1000 appears enough for this example to get us all the way to the bottom. Setting behavior to smooth for a little flair.\n{\n  top: 1000,\n  behavior: \"smooth\",\n}\nThis means that the fragment is finished with\nReveal.on('fragmentshown', (event) =&gt; {\n  if (event.fragment.classList.contains(\"scroll\")) {\n Reveal\n    .getCurrentSlide()\n    .querySelector(\".cell-output code\")\n    .scrollTo({\n top: 1000,\n behavior: \"smooth\",\n    })\n  }\n});\nBut wait! What if you have to go back? this is where fragmenthidden is needed, we simply take the preview code and say we want to go back to the top by setting top to 0.\nReveal.on('fragmenthidden', (event) =&gt; {\n  if (event.fragment.classList.contains(\"scroll\")) {\n Reveal\n    .getCurrentSlide()\n    .querySelector(\".cell-output code\")\n    .scrollTo({\n top: 0,\n behavior: \"smooth\",\n    })\n  }\n});\n\n\n\n\n\n\nNote\n\n\n\nSome changes to our slides are really hard to reverse. They would thus make for bad fragments. You could implement them halfway without the fragmenthidden and you would just need to be really confident that you never have to go backwards in your slides.\n\n\n\n\nqmd js\n\n\n\n\n\n\nTip\n\n\n\nWe didn’t do it here, but you could use dataset values to help determine which elements should be scrolled and how much to scroll them by instead of hardcoding it all as we do here.",
    "crumbs": [
      "Interactivity",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Fragments</span>"
    ]
  },
  {
    "objectID": "fragments.html#tabset-advance",
    "href": "fragments.html#tabset-advance",
    "title": "11  Fragments",
    "section": "11.9 Tabset advance",
    "text": "11.9 Tabset advance\nQuarto also has tabset support for slides, which is again a very nice feature. It runs into the same clicker interaction we noted earlier. It requires a mouse to correctly toggle in the middle of a presentation.\nWe can deal with this as well. As always we need to find the elements and how to toggle them.\n\n\n\n\n\n\nNote\n\n\n\nThe astute reader will notice that the following will only work on a tabset with 2 tabs. Making this fragment work for multiple tabs is left as an exercise for the reader.\n\n\nWe are again using .getCurrentSlide() and querySelector(), and with some trial and error, determine that the following two CSS selectors captures the two tabs.\n\n.panel-tabset ul li:first-of-type a\n.panel-tabset ul li:last-of-type a\n\nAnd we are lucky because these elements have a working .click() method that we can use.\nThis means that the full fragment looks like this:\nReveal.on('fragmentshown', (event) =&gt; {\n  if (event.fragment.classList.contains(\"tabswitch\")) {\n Reveal\n      .getCurrentSlide()\n      .querySelector(\".panel-tabset ul li:last-of-type a\")\n      .click()\n  }\n});\n\nReveal.on('fragmenthidden', (event) =&gt; {\n  if (event.fragment.classList.contains(\"tabswitch\")) {\n Reveal\n      .getCurrentSlide()\n      .querySelector(\".panel-tabset ul li:first-of-type a\")\n      .click()\n  }\n});\n\n\nqmd js",
    "crumbs": [
      "Interactivity",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Fragments</span>"
    ]
  },
  {
    "objectID": "fragments.html#advance-embedded-slides",
    "href": "fragments.html#advance-embedded-slides",
    "title": "11  Fragments",
    "section": "11.10 advance embedded slides",
    "text": "11.10 advance embedded slides\nThe last example I’ll show for now is one you have seen me use already. I like to put quarto slides inside quarto slides. However, it becomes messy to advance the embedded slides, because they take focus of the mouse. I have used a fragment to advance these.\nWe start by embedding a set of slides in our set of slides. We do thing with &lt;iframe class=\"slide-deck\" src=\"fragment-scroll.html\" style=\"width:100%; height: 500px;\" &gt;&lt;/iframe&gt;.\nThe Reveal object has a fairly extensive API you can use. So we just need to fetch the right Reveal object so we can use the .left() and .right() methods to advance the slides. It took me a while to find the right code, but .contentWindow was the missing piece. The following returns the embedded Reveal object.\nReveal\n  .getCurrentSlide()\n  .querySelector(\"iframe\")\n  .contentWindow\n  .Reveal\nWhich then gives us the following as our fragment\nReveal.on('fragmentshown', event =&gt; {\n  if (event.fragment.classList.contains(\"advance-slide\")) {\n Reveal\n      .getCurrentSlide()\n       .querySelector(\"iframe\")\n      .contentWindow\n      .Reveal\n      .right()\n    }\n});\nReveal.on('fragmenthidden', event =&gt; {\n  if (event.fragment.classList.contains(\"advance-slide\")) {\n Reveal\n      .getCurrentSlide()\n      .querySelector(\"iframe\")\n      .contentWindow\n      .Reveal\n      .left()\n    }\n});\n\n\nqmd js",
    "crumbs": [
      "Interactivity",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Fragments</span>"
    ]
  },
  {
    "objectID": "miscellaneous.html",
    "href": "miscellaneous.html",
    "title": "13  miscellaneous",
    "section": "",
    "text": "13.1 Hiding slides\nchanging the slide visibility is as simple as setting visibility=\"hidden\" attribute to the header of a slide\nI find this useful when I have to give the same presentation multiple times, and I have a disclaimer or other seasonally important slides. Instead of removing and reinserting the information each time, I just changed the attribute.\nqmd",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>miscellaneous</span>"
    ]
  },
  {
    "objectID": "miscellaneous.html#hiding-slides",
    "href": "miscellaneous.html#hiding-slides",
    "title": "13  miscellaneous",
    "section": "",
    "text": "## Slide Title {visibility=\"hidden\"}",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>miscellaneous</span>"
    ]
  },
  {
    "objectID": "miscellaneous.html#avoid-duplication-using-includes",
    "href": "miscellaneous.html#avoid-duplication-using-includes",
    "title": "13  miscellaneous",
    "section": "13.2 Avoid duplication using Includes",
    "text": "13.2 Avoid duplication using Includes\nThis last tip doesn’t come with an example, as it doesn’t get useful before you start working with multiple files. We are talking about the includes short code.\nUsing the following short code; {{&lt; include _content.qmd &gt;}} includes the content of _content.qmd into the document in a “copy-paste” manner before the rendering of the document.\nThis has proved useful for me when I want the same slides to appear at the start or end of multiple decks. And you are not limited to .qmd files! you can embed html files or svg too.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>miscellaneous</span>"
    ]
  }
]