{"title":"SCSS","markdown":{"yaml":{"title":"SCSS"},"headingText":"Using `Maps` to store theme colors","containsRefs":false,"markdown":"\n\n\n\nBefore I would have specified a color palette theme as\n\n```scss\n$theme-red: #FA5F5C;\n$theme-blue: #394D85;\n$theme-darkblue: #13234B;\n$theme-yellow: #FFF7C7;\n$theme-white: #FEFEFE;\n```\n\nBut using a map it turns into the following\n\n```scss\n$colors: (\n  \"red\": #FA5F5C,\n  \"blue\": #394D85,\n  \"darkblue\": #13234B,\n  \"yellow\": #FFF7C7,\n  \"white\": #FEFEFE\n);\n```\n\n::: {.callout-note}\nThere is a difference between `(key: value)` and `(\"key\": value)` in SASS. For consistency, I also use quoted strings as the keys in a map.\n:::\n\nInstead of having multiple values representing our colors we now just have one `$colors`. By themselves, maps aren't valid CSS and don't do anything once the SASS compiles. The next sections will show how we can use these maps more efficiently than my previous approach.\n\n## Using `Functions` to pull out theme colors\n\nWe where using these colors to change a lot of things, including the major [Sass Variables](https://quarto.org/docs/presentations/revealjs/themes.html#sass-variables) revealjs sass variables. Before we used a map, it would look something like this:\n\n```scss\n$body-bg: $theme-yellow;\n$link-color: $theme-blue;\n$code-color: $theme-blue;\n$body-color: $theme-darkblue;\n```\n\nbut we can't do that directly with a map. There are built-in functions to extract values from a map, namely the function [map-get()](https://sass-lang.com/documentation/values/maps/#look-up-a-value). Using that we can rewrite the above as\n\n```scss\n$body-bg: map-get($colors, \"yellow\");\n$link-color: map-get($colors, \"blue\");\n$code-color: map-get($colors, \"blue\");\n$body-color: map-get($colors, \"darkblue\");\n```\n\nAnd while that is all good, I find it a little nicer to have a helper [function](https://sass-lang.com/documentation/at-rules/function/) to do this.\n\nFunctions in SASS are written as below. You can use as many arguments as you want.\n\n```scss\n@function name($arg1, $arg2) {\n  @return $arg1 + $arg2;\n}\n```\n\nThe helper function I wrote is a light wrapper around `map-get()` to avoid having to write `$colors`.\n\n```scss\n@function theme-color($color) {\n  @return map-get($colors, $color);\n}\n```\n\nAnd we now have the final rewrite.\n\n```scss\n$body-bg: theme-color(\"yellow\");\n$link-color: theme-color(\"blue\");\n$code-color: theme-color(\"blue\");\n$body-color: theme-color(\"darkblue\");\n```\n\n::: {.callout-note}\nNote that we are using `theme-color(\"yellow\")` instead of `theme-color(yellow)` because we used quoted strings in the map. Using unquoted strings all around gave me false positives in my IDE as it interpreted `yellow` inside `theme-color()` as `#FFFF00` instead of my theme value.\n:::\n\n## Using `@each` to automatically create classes\n\nTo add a splash of color, or as used in highlighting, I would create a lot of CSS classes like so:\n\n```scss\n.text-red {\n  color: $theme-red;\n}\n.text-yellow {\n  color: $theme-yellow;\n}\n.text-blue {\n  color: $theme-blue;\n}\n\n.bg-red {\n  background-color: $theme-red;\n}\n.bg-yellow {\n  background-color: $theme-yellow;\n}\n.bg-blue {\n  background-color: $theme-blue;\n}\n```\n\nWhich is all fine and dandy until you also want a class for underlining. It becomes a lot of copy-pasting and changing a couple of names. And that is not to mention the trouble you run into when you decide to add a new color into the mix halfway through your slides.\n\nThis is when I discovered [interpolation](https://sass-lang.com/documentation/interpolation/) and the moment I realized maps were worth it. Interpolation is done by using `#{}` in some code, meaning that if `$favorite-color: \"blue\"` then `.text-#{$favorite-color} {}` turns into `.text-blue {}`. SASS provides the action [`@each`](https://sass-lang.com/documentation/at-rules/control/each/) to loop over all the key and value pairs of our map. So we can rewrite the creation of the above classes as this:\n\n```scss\n@each $name, $color in $colors {\n  .text-#{$name} {\n    color: $color;\n  }\n\n  .bg-#{$name} {\n    background-color: $color;\n  }\n}\n```\n\nAnd this is the beauty of maps. If I want to add a new color to my slides, I just have to add it to the `$colors` map. If I want to add a new set of classes, I just have to write it once inside the `@each` statement.\n\n## Using `@mixin` to avoid repeating code\n\nWith the following code\n\n```scss\n@mixin background-full {\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n}\n\n.theme-slide1 {\n  &:is(.slide-background) {\n    background-image: url('../../../../../assets/slide1.svg');\n    @include background-full;\n  }\n}\n.theme-slide2 {\n  &:is(.slide-background) {\n    background-image: url('../../../../../assets/slide2.svg');\n    @include background-full;\n  }\n}\n.theme-slide3 {\n  &:is(.slide-background) {\n    background-image: url('../../../../../assets/slide3.svg');\n    @include background-full;\n  }\n}\n```\n\nCopy-pasting this around when you have 10-15 images is such a pain. But as you properly have noticed, interpolation would be a perfect solution to this problem, and you would be correct! We use a [`@mixin`](https://sass-lang.com/documentation/at-rules/mixin/) to create to create a way to create many classes:\n\n```scss\n@mixin theme-slide($number) {\n  .theme-slide#{$number} {\n    &:is(.slide-background) {\n      background-image: url('../../../../../assets/slide#{$number}.svg');\n      @include background-full;\n    }\n  }\n}\n\n@include theme-slide(1);\n@include theme-slide(2);\n@include theme-slide(3);\n```\n\nIt becomes quite a bit tighter! But we can do better because SASS also has [`@for`](https://sass-lang.com/documentation/at-rules/control/for/) loops.\n\n```scss\n@mixin theme-slide($number) {\n  .theme-slide#{$number} {\n    &:is(.slide-background) {\n      background-image: url('../../../../../assets/slide#{$number}.svg');\n      @include background-full;\n    }\n  }\n}\n\n@for $i from 1 through 3 {\n  @include theme-slide($i);\n}\n```\n\nyou can now add more background images with ease as long as you are careful when naming them.\n\n\n## Using nested loops to create classes\n\nIn our first example, I want a fun gradient shadow/highlight effect for text. We can get that effect using something like following\n\n```css\nbackground-image: linear-gradient(90deg, yellow, blue);\nbackground-size: 100% 42%;\nbackground-repeat: no-repeat;\nbackground-position: 0 85%;\nwidth: fit-content;\n```\n\nI want it to work on both inline text and as a way to handle the header, the selectors for that would be `span.my-class` and `.my-class > h2` respectively.\n\n\n```css\nspan.my-class, .my-class > h2 {\n  background-image: linear-gradient(90deg, yellow, blue);\n  background-size: 100% 42%;\n  background-repeat: no-repeat;\n  background-position: 0 85%;\n  width: fit-content;\n}\n```\n\nAnd them we fill in the rest, using the [`@each`](https://sass-lang.com/documentation/at-rules/control/each/#with-maps) command twice nestedly over a map of colors.\n\n```scss\n/*-- scss:defaults --*/\n\n$colors: (\n  \"red\": #FFADAD, \n\"orange\": #FFD6A5, \n  \"yellow\": #FDFFB6, \n  \"blue\": #aad2e7, \n  \"purple\":#b4addd\n);\n\n/*-- scss:rules --*/\n\n@each $name1, $col1 in $colors {\n  @each $name2, $col2 in $colors {\n    span.hl-#{$name1}-#{$name2}, .hl-#{$name1}-#{$name2} > h2 {\n      background-image: linear-gradient(90deg, $col1, $col2);\n      background-size: 100% 42%;\n      background-repeat: no-repeat;\n      background-position: 0 85%;\n      width: fit-content;\n    }\n  }\n}\n```\n\nI know we are creating some non-interesting classes such as `.hl-yellow-yellow` but for what we are doing, the tradeoff between avoiding them and how little it impacts us to have them. I think it is a worthwhile tradeoff.\n\n::: {.callout-important}\nThe slides in this post are interactive, advance them to see the other classes.\n:::\n\n<iframe class=\"slide-deck\" src=\"examples/scss/tip-1.html\">\n\n</iframe>\n\n<a href=\"examples/scss/tip-1.qmd\" target=\"_blank\" class=\"listing-slides btn-links\">{{< fa file >}}qmd<a>\n<a href=\"examples/scss/tip-1.scss\" target=\"_blank\" class=\"listing-video btn-links\">{{< fa brands sass >}}scss<a>\n\n::: {.callout-note}\nYou don't need these compound classes for everything. For example, the class `.hl-green-bold` isn't going to be useful as you could just as easily create `.hl-green` and `.bold` separately. This trick works best when two elements are used together in a tightly coupled way, such as in gradients. \n:::\n\nFor our second example, we are continuing with the gradients, but instead trying to apply them to the background. My goal was to add a gradient line to the right side of the slide. \n\nI was able to create that effect, by layering 2 gradients on top of each other. The first gradient contained the two colors I was interested in, and the names of the class. The second layer, which I placed on top, goes from white to transparent. I set up the transition between those two colors to be super sharp, resulting in the effect you see below\n\n<iframe class=\"slide-deck\" src=\"examples/scss/tip-2.html\">\n\n</iframe>\n\n<a href=\"examples/scss/tip-2.qmd\" target=\"_blank\" class=\"listing-slides btn-links\">{{< fa file >}}qmd<a>\n<a href=\"examples/scss/tip-2.scss\" target=\"_blank\" class=\"listing-video btn-links\">{{< fa brands sass >}}scss<a>\n\nsince we are doing something interesting, we could also have used a separate `$colors` map just for this effect to not interfere with what else we are doing.\n","srcMarkdownNoYaml":"\n\n\n## Using `Maps` to store theme colors\n\nBefore I would have specified a color palette theme as\n\n```scss\n$theme-red: #FA5F5C;\n$theme-blue: #394D85;\n$theme-darkblue: #13234B;\n$theme-yellow: #FFF7C7;\n$theme-white: #FEFEFE;\n```\n\nBut using a map it turns into the following\n\n```scss\n$colors: (\n  \"red\": #FA5F5C,\n  \"blue\": #394D85,\n  \"darkblue\": #13234B,\n  \"yellow\": #FFF7C7,\n  \"white\": #FEFEFE\n);\n```\n\n::: {.callout-note}\nThere is a difference between `(key: value)` and `(\"key\": value)` in SASS. For consistency, I also use quoted strings as the keys in a map.\n:::\n\nInstead of having multiple values representing our colors we now just have one `$colors`. By themselves, maps aren't valid CSS and don't do anything once the SASS compiles. The next sections will show how we can use these maps more efficiently than my previous approach.\n\n## Using `Functions` to pull out theme colors\n\nWe where using these colors to change a lot of things, including the major [Sass Variables](https://quarto.org/docs/presentations/revealjs/themes.html#sass-variables) revealjs sass variables. Before we used a map, it would look something like this:\n\n```scss\n$body-bg: $theme-yellow;\n$link-color: $theme-blue;\n$code-color: $theme-blue;\n$body-color: $theme-darkblue;\n```\n\nbut we can't do that directly with a map. There are built-in functions to extract values from a map, namely the function [map-get()](https://sass-lang.com/documentation/values/maps/#look-up-a-value). Using that we can rewrite the above as\n\n```scss\n$body-bg: map-get($colors, \"yellow\");\n$link-color: map-get($colors, \"blue\");\n$code-color: map-get($colors, \"blue\");\n$body-color: map-get($colors, \"darkblue\");\n```\n\nAnd while that is all good, I find it a little nicer to have a helper [function](https://sass-lang.com/documentation/at-rules/function/) to do this.\n\nFunctions in SASS are written as below. You can use as many arguments as you want.\n\n```scss\n@function name($arg1, $arg2) {\n  @return $arg1 + $arg2;\n}\n```\n\nThe helper function I wrote is a light wrapper around `map-get()` to avoid having to write `$colors`.\n\n```scss\n@function theme-color($color) {\n  @return map-get($colors, $color);\n}\n```\n\nAnd we now have the final rewrite.\n\n```scss\n$body-bg: theme-color(\"yellow\");\n$link-color: theme-color(\"blue\");\n$code-color: theme-color(\"blue\");\n$body-color: theme-color(\"darkblue\");\n```\n\n::: {.callout-note}\nNote that we are using `theme-color(\"yellow\")` instead of `theme-color(yellow)` because we used quoted strings in the map. Using unquoted strings all around gave me false positives in my IDE as it interpreted `yellow` inside `theme-color()` as `#FFFF00` instead of my theme value.\n:::\n\n## Using `@each` to automatically create classes\n\nTo add a splash of color, or as used in highlighting, I would create a lot of CSS classes like so:\n\n```scss\n.text-red {\n  color: $theme-red;\n}\n.text-yellow {\n  color: $theme-yellow;\n}\n.text-blue {\n  color: $theme-blue;\n}\n\n.bg-red {\n  background-color: $theme-red;\n}\n.bg-yellow {\n  background-color: $theme-yellow;\n}\n.bg-blue {\n  background-color: $theme-blue;\n}\n```\n\nWhich is all fine and dandy until you also want a class for underlining. It becomes a lot of copy-pasting and changing a couple of names. And that is not to mention the trouble you run into when you decide to add a new color into the mix halfway through your slides.\n\nThis is when I discovered [interpolation](https://sass-lang.com/documentation/interpolation/) and the moment I realized maps were worth it. Interpolation is done by using `#{}` in some code, meaning that if `$favorite-color: \"blue\"` then `.text-#{$favorite-color} {}` turns into `.text-blue {}`. SASS provides the action [`@each`](https://sass-lang.com/documentation/at-rules/control/each/) to loop over all the key and value pairs of our map. So we can rewrite the creation of the above classes as this:\n\n```scss\n@each $name, $color in $colors {\n  .text-#{$name} {\n    color: $color;\n  }\n\n  .bg-#{$name} {\n    background-color: $color;\n  }\n}\n```\n\nAnd this is the beauty of maps. If I want to add a new color to my slides, I just have to add it to the `$colors` map. If I want to add a new set of classes, I just have to write it once inside the `@each` statement.\n\n## Using `@mixin` to avoid repeating code\n\nWith the following code\n\n```scss\n@mixin background-full {\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n}\n\n.theme-slide1 {\n  &:is(.slide-background) {\n    background-image: url('../../../../../assets/slide1.svg');\n    @include background-full;\n  }\n}\n.theme-slide2 {\n  &:is(.slide-background) {\n    background-image: url('../../../../../assets/slide2.svg');\n    @include background-full;\n  }\n}\n.theme-slide3 {\n  &:is(.slide-background) {\n    background-image: url('../../../../../assets/slide3.svg');\n    @include background-full;\n  }\n}\n```\n\nCopy-pasting this around when you have 10-15 images is such a pain. But as you properly have noticed, interpolation would be a perfect solution to this problem, and you would be correct! We use a [`@mixin`](https://sass-lang.com/documentation/at-rules/mixin/) to create to create a way to create many classes:\n\n```scss\n@mixin theme-slide($number) {\n  .theme-slide#{$number} {\n    &:is(.slide-background) {\n      background-image: url('../../../../../assets/slide#{$number}.svg');\n      @include background-full;\n    }\n  }\n}\n\n@include theme-slide(1);\n@include theme-slide(2);\n@include theme-slide(3);\n```\n\nIt becomes quite a bit tighter! But we can do better because SASS also has [`@for`](https://sass-lang.com/documentation/at-rules/control/for/) loops.\n\n```scss\n@mixin theme-slide($number) {\n  .theme-slide#{$number} {\n    &:is(.slide-background) {\n      background-image: url('../../../../../assets/slide#{$number}.svg');\n      @include background-full;\n    }\n  }\n}\n\n@for $i from 1 through 3 {\n  @include theme-slide($i);\n}\n```\n\nyou can now add more background images with ease as long as you are careful when naming them.\n\n\n## Using nested loops to create classes\n\nIn our first example, I want a fun gradient shadow/highlight effect for text. We can get that effect using something like following\n\n```css\nbackground-image: linear-gradient(90deg, yellow, blue);\nbackground-size: 100% 42%;\nbackground-repeat: no-repeat;\nbackground-position: 0 85%;\nwidth: fit-content;\n```\n\nI want it to work on both inline text and as a way to handle the header, the selectors for that would be `span.my-class` and `.my-class > h2` respectively.\n\n\n```css\nspan.my-class, .my-class > h2 {\n  background-image: linear-gradient(90deg, yellow, blue);\n  background-size: 100% 42%;\n  background-repeat: no-repeat;\n  background-position: 0 85%;\n  width: fit-content;\n}\n```\n\nAnd them we fill in the rest, using the [`@each`](https://sass-lang.com/documentation/at-rules/control/each/#with-maps) command twice nestedly over a map of colors.\n\n```scss\n/*-- scss:defaults --*/\n\n$colors: (\n  \"red\": #FFADAD, \n\"orange\": #FFD6A5, \n  \"yellow\": #FDFFB6, \n  \"blue\": #aad2e7, \n  \"purple\":#b4addd\n);\n\n/*-- scss:rules --*/\n\n@each $name1, $col1 in $colors {\n  @each $name2, $col2 in $colors {\n    span.hl-#{$name1}-#{$name2}, .hl-#{$name1}-#{$name2} > h2 {\n      background-image: linear-gradient(90deg, $col1, $col2);\n      background-size: 100% 42%;\n      background-repeat: no-repeat;\n      background-position: 0 85%;\n      width: fit-content;\n    }\n  }\n}\n```\n\nI know we are creating some non-interesting classes such as `.hl-yellow-yellow` but for what we are doing, the tradeoff between avoiding them and how little it impacts us to have them. I think it is a worthwhile tradeoff.\n\n::: {.callout-important}\nThe slides in this post are interactive, advance them to see the other classes.\n:::\n\n<iframe class=\"slide-deck\" src=\"examples/scss/tip-1.html\">\n\n</iframe>\n\n<a href=\"examples/scss/tip-1.qmd\" target=\"_blank\" class=\"listing-slides btn-links\">{{< fa file >}}qmd<a>\n<a href=\"examples/scss/tip-1.scss\" target=\"_blank\" class=\"listing-video btn-links\">{{< fa brands sass >}}scss<a>\n\n::: {.callout-note}\nYou don't need these compound classes for everything. For example, the class `.hl-green-bold` isn't going to be useful as you could just as easily create `.hl-green` and `.bold` separately. This trick works best when two elements are used together in a tightly coupled way, such as in gradients. \n:::\n\nFor our second example, we are continuing with the gradients, but instead trying to apply them to the background. My goal was to add a gradient line to the right side of the slide. \n\nI was able to create that effect, by layering 2 gradients on top of each other. The first gradient contained the two colors I was interested in, and the names of the class. The second layer, which I placed on top, goes from white to transparent. I set up the transition between those two colors to be super sharp, resulting in the effect you see below\n\n<iframe class=\"slide-deck\" src=\"examples/scss/tip-2.html\">\n\n</iframe>\n\n<a href=\"examples/scss/tip-2.qmd\" target=\"_blank\" class=\"listing-slides btn-links\">{{< fa file >}}qmd<a>\n<a href=\"examples/scss/tip-2.scss\" target=\"_blank\" class=\"listing-video btn-links\">{{< fa brands sass >}}scss<a>\n\nsince we are doing something interesting, we could also have used a separate `$colors` map just for this effect to not interfere with what else we are doing.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"scss.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.56","bibliography":["references.bib"],"theme":"cosmo","title":"SCSS"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}