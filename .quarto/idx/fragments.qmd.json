{"title":"Fragments","markdown":{"yaml":{"title":"Fragments"},"headingText":"Highlight incremental slides","containsRefs":false,"markdown":"\n\n\nThe use of [incremental lists](https://quarto.org/docs/presentations/revealjs/#incremental-lists) is a great way to add a little something to a set of slides. It also avoids a wall of text, allowing the presenter to show one bullet at a time. All in all, this is helpful as it can be used to focus the viewers' attention. \n\nAs a reminder, we create an incremental list using the following syntax:\n\n```markdown\n::: {.incremental}\n- thing 1\n- thing 2\n:::\n```\n\nWe can add another class to this div and use it to style it more. \n\n```markdown\n::: {.incremental .highlight-last}\n- thing 1\n- thing 2\n:::\n```\n\nthen we use this to style our list. Below `.current-fragment` refers to the last shown item in the list. Setting the `color: grey` isn't necessary, but it is a way to downplay the \"not-current\" items\n\n```scss\n.highlight-last  {\n  color: grey;\n  .current-fragment {\n    color: #5500ff;\n  }\n}\n```\n\nThese together yield these slides:\n\n<iframe class=\"slide-deck\" src=\"../examples/fragments/tip-1.html\">\n\n</iframe>\n\n<a href=\"../examples/fragments/tip-1.qmd\" target=\"_blank\" class=\"listing-slides btn-links\">{{< fa file >}}qmd<a>\n<a href=\"../examples/fragments/tip-1.scss\" target=\"_blank\" class=\"listing-video btn-links\">{{< fa brands sass >}}scss<a>\n\n## Changing fragments with CSS\n\nAt the most fundamental level, a fragment can be split into 3 stages\n\n- before\n- current\n- after\n\ndetermining which stage is handled completely by revealjs using the `fragment-index` attribute. The way we can make things happen is to apply a different style to each of the 3 stages.\n\nthe maximal fragment signature is as follows, with `fragment-name` being the name of the fragment in question. For them to work properly you have to list them in the following order. Which corresponds to `before`, `after`, and `current`.\n\n```css\n.reveal .slides section .fragment.fragment-name {\n}\n\n.reveal .slides section .fragment.fragment-name.visible {\n}\n\n.reveal .slides section .fragment.fragment-name.current-fragment {\n}\n```\n\n:::: {.callout-important}\nThe reason why this ordering is important is because `.visible` and `.current-fragment` are triggered at the same time. And because I simplified the order a little too much. There isn't `before`, `current`, and `after`. Instead, we have `always`, `current`, and `not-before-current`. In essence, they do the same, as long as you order them in this order to make sure they cascade properly.\n:::\n\nBefore we try to implement a fragment by ourselves, we need to note one thing real quick. Each of these stages is styled a [specific way by default](https://github.com/quarto-dev/quarto-cli/blob/39dc173c4869ebaf4d6bb087a972acb87533b64e/src/resources/formats/revealjs/reveal/css/reveal.scss#L51-L65). In practice, what this means is that the `before` style has the following attributes set to make the text invisible:\n\n```css\nopacity: 0;\nvisibility: hidden;\n```\n\nIf you want the text to be visible before the fragment triggers, simply set these two attributes to `unset`.\n\nAnother note I would like to add is that while you are able to modify anything in a fragment, as it is just triggering CSS, you should be careful about position and size. While you might be able to make it work, it is likely to cause a lot of shifting and jittering as elements resize.\n\n:::: {.callout-tip}\nLooking at the [source code](https://github.com/quarto-dev/quarto-cli/blob/39dc173c4869ebaf4d6bb087a972acb87533b64e/src/resources/formats/revealjs/reveal/css/reveal.scss#L67-L207) for the default fragments gives us a good idea for how different styles of fragments work.\n:::\n\n## Example 1\n\nThis first example illustrates how the different phases work in a fragment. We have thus created an `rgb` fragment that assigns a different color to each of the 3 phases. We `unset` both `opacity` and `visibility` to have the text appear beforehand. This leaves us with the following fragment:\n\n```scss\n.reveal .slides section .fragment.rgb {\n  opacity: unset;\n  visibility: unset;\n  color: red;\n}\n\n.reveal .slides section .fragment.rgb.visible {\n  color: blue;\n}\n\n.reveal .slides section .fragment.rgb.current-fragment {\n  color: green;\n}\n```\n\nAdvancing and de-advancing(?) the slides showcase how the different classes are applied for fragments.\n\n<iframe class=\"slide-deck\" src=\"examples/fragments/fragment-rgb.html\">\n</iframe>\n\n<a href=\"examples/fragments/fragment-rgb.qmd\" target=\"_blank\" class=\"listing-slides btn-links\">{{< fa file >}}qmd<a>\n<a href=\"examples/fragments/rgb.scss\" target=\"_blank\" class=\"listing-video btn-links\">{{< fa brands sass >}}scss<a>\n\nWorth noting that this single fragment could be rewritten as the following using SCSS nesting.\n\n```scss\n.reveal .slides section .fragment.rgb {\n  opacity: unset;\n  visibility: unset;\n  color: red;\n\n  &.visible {\n    color: blue;\n  }\n\n  &.current-fragment {\n    color: green;\n  }\n}\n```\n\n## Example 2\n\nOne custom fragment I use from time to time is the background highlighted style. And it is very simple, instead of changing the color of the text, it changes the background color. I find that it is a much stronger indication than changing the text itself.\n\nThis fragment gives us two things. I leave the text visible beforehand. Then it turns the background orange, and after it lightens the background color a little bit.\n\n```scss\n$theme-orange: #FFB81A;\n\n.reveal .slides section .fragment.hl-orange {\n  opacity: unset;\n  visibility: unset;\n\n  &.visible {\n    background-color: $theme-orange;\n  }\n\n  &.current-fragment {\n    background-color: darken($theme-orange, 10%);\n  }\n}\n```\n\nThis once is nice and flexible because it is easy to extend.\n\n```scss\n$theme-orange: #FFB81A;\n$theme-yellow: #FFD571;\n$theme-brown: #E2AE86;\n$theme-pink: #FED7E1;\n\n.reveal .slides section .fragment {\n\n  &.hl-orange,\n  &.hl-yellow,\n  &.hl-pink,\n  &.hl-brown {\n    opacity: 1;\n    visibility: inherit\n  }\n\n  &.hl-brown.visible {\n    background-color: $theme-brown;\n  }\n\n  &.hl-brown.current-fragment {\n    background-color: darken($theme-brown, 10%);\n  }\n\n  &.hl-orange.visible {\n    background-color: $theme-orange;\n  }\n\n  &.hl-orange.current-fragment {\n    background-color: darken($theme-orange, 10%);\n  }\n\n  &.hl-yellow.visible {\n    background-color: $theme-yellow;\n  }\n\n  &.hl-yellow.current-fragment {\n    background-color: darken($theme-yellow, 10%);\n  }\n\n  &.hl-pink.visible {\n    background-color: $theme-pink;\n  }\n\n  &.hl-pink.current-fragment {\n    background-color: darken($theme-pink, 10%);\n  }\n}\n```\n\nAnd we are willing to tap into some scss we can condense it down quite a lot using [SCSS loops](scss.qmd#using-each-to-automatically-create-classes).\n\n```scss\n$colors: (\n  \"orange\": #FFB81A,\n  \"yellow\": #FFD571,\n  \"brown\": #E2AE86,\n  \"pink\": #FED7E1\n);\n\n@each $name, $color in $colors {\n  .reveal .slides section .fragment.hl-#{$name} {\n    opacity: unset;\n    visibility: unset;\n\n    &.visible {\n      background-color: lighten($color, 5%);\n    }\n\n    &.current-fragment {\n      background-color: $color;\n    }\n  }\n}\n```\n\n<iframe class=\"slide-deck\" src=\"examples/fragments/fragment-highlighter.html\">\n</iframe>\n\n<a href=\"examples/fragments/fragment-highlighter.qmd\" target=\"_blank\" class=\"listing-slides btn-links\">{{< fa file >}}qmd<a>\n<a href=\"examples/fragments/highlighter.scss\" target=\"_blank\" class=\"listing-video btn-links\">{{< fa brands sass >}}scss<a>\n\n## Example 3\n\nThe last example included a bit of flair by having the current fragment element be a slightly different color and then changing it after. We can simplify it a bit by not specifying the `.current-fragment` class.\n\n```scss\n$theme-orange: #FFB81A;\n\n.reveal .slides section .fragment.hl-orange {\n  opacity: unset;\n  visibility: unset;\n\n  &.visible {\n    background-color: $theme-orange;\n  }\n}\n```\n\nThis fragment works more or less the same way as before but doesn't change color once it is applied. It will be a more appropriate fragment many times.\n\nThis leads us to our final piece of knowledge in this blog post. We don't have to fully specify a fragment. We just have to declare how we want it to behave differently, and then the default \"stay hidden, then appear\" fragment.\n","srcMarkdownNoYaml":"\n\n## Highlight incremental slides\n\nThe use of [incremental lists](https://quarto.org/docs/presentations/revealjs/#incremental-lists) is a great way to add a little something to a set of slides. It also avoids a wall of text, allowing the presenter to show one bullet at a time. All in all, this is helpful as it can be used to focus the viewers' attention. \n\nAs a reminder, we create an incremental list using the following syntax:\n\n```markdown\n::: {.incremental}\n- thing 1\n- thing 2\n:::\n```\n\nWe can add another class to this div and use it to style it more. \n\n```markdown\n::: {.incremental .highlight-last}\n- thing 1\n- thing 2\n:::\n```\n\nthen we use this to style our list. Below `.current-fragment` refers to the last shown item in the list. Setting the `color: grey` isn't necessary, but it is a way to downplay the \"not-current\" items\n\n```scss\n.highlight-last  {\n  color: grey;\n  .current-fragment {\n    color: #5500ff;\n  }\n}\n```\n\nThese together yield these slides:\n\n<iframe class=\"slide-deck\" src=\"../examples/fragments/tip-1.html\">\n\n</iframe>\n\n<a href=\"../examples/fragments/tip-1.qmd\" target=\"_blank\" class=\"listing-slides btn-links\">{{< fa file >}}qmd<a>\n<a href=\"../examples/fragments/tip-1.scss\" target=\"_blank\" class=\"listing-video btn-links\">{{< fa brands sass >}}scss<a>\n\n## Changing fragments with CSS\n\nAt the most fundamental level, a fragment can be split into 3 stages\n\n- before\n- current\n- after\n\ndetermining which stage is handled completely by revealjs using the `fragment-index` attribute. The way we can make things happen is to apply a different style to each of the 3 stages.\n\nthe maximal fragment signature is as follows, with `fragment-name` being the name of the fragment in question. For them to work properly you have to list them in the following order. Which corresponds to `before`, `after`, and `current`.\n\n```css\n.reveal .slides section .fragment.fragment-name {\n}\n\n.reveal .slides section .fragment.fragment-name.visible {\n}\n\n.reveal .slides section .fragment.fragment-name.current-fragment {\n}\n```\n\n:::: {.callout-important}\nThe reason why this ordering is important is because `.visible` and `.current-fragment` are triggered at the same time. And because I simplified the order a little too much. There isn't `before`, `current`, and `after`. Instead, we have `always`, `current`, and `not-before-current`. In essence, they do the same, as long as you order them in this order to make sure they cascade properly.\n:::\n\nBefore we try to implement a fragment by ourselves, we need to note one thing real quick. Each of these stages is styled a [specific way by default](https://github.com/quarto-dev/quarto-cli/blob/39dc173c4869ebaf4d6bb087a972acb87533b64e/src/resources/formats/revealjs/reveal/css/reveal.scss#L51-L65). In practice, what this means is that the `before` style has the following attributes set to make the text invisible:\n\n```css\nopacity: 0;\nvisibility: hidden;\n```\n\nIf you want the text to be visible before the fragment triggers, simply set these two attributes to `unset`.\n\nAnother note I would like to add is that while you are able to modify anything in a fragment, as it is just triggering CSS, you should be careful about position and size. While you might be able to make it work, it is likely to cause a lot of shifting and jittering as elements resize.\n\n:::: {.callout-tip}\nLooking at the [source code](https://github.com/quarto-dev/quarto-cli/blob/39dc173c4869ebaf4d6bb087a972acb87533b64e/src/resources/formats/revealjs/reveal/css/reveal.scss#L67-L207) for the default fragments gives us a good idea for how different styles of fragments work.\n:::\n\n## Example 1\n\nThis first example illustrates how the different phases work in a fragment. We have thus created an `rgb` fragment that assigns a different color to each of the 3 phases. We `unset` both `opacity` and `visibility` to have the text appear beforehand. This leaves us with the following fragment:\n\n```scss\n.reveal .slides section .fragment.rgb {\n  opacity: unset;\n  visibility: unset;\n  color: red;\n}\n\n.reveal .slides section .fragment.rgb.visible {\n  color: blue;\n}\n\n.reveal .slides section .fragment.rgb.current-fragment {\n  color: green;\n}\n```\n\nAdvancing and de-advancing(?) the slides showcase how the different classes are applied for fragments.\n\n<iframe class=\"slide-deck\" src=\"examples/fragments/fragment-rgb.html\">\n</iframe>\n\n<a href=\"examples/fragments/fragment-rgb.qmd\" target=\"_blank\" class=\"listing-slides btn-links\">{{< fa file >}}qmd<a>\n<a href=\"examples/fragments/rgb.scss\" target=\"_blank\" class=\"listing-video btn-links\">{{< fa brands sass >}}scss<a>\n\nWorth noting that this single fragment could be rewritten as the following using SCSS nesting.\n\n```scss\n.reveal .slides section .fragment.rgb {\n  opacity: unset;\n  visibility: unset;\n  color: red;\n\n  &.visible {\n    color: blue;\n  }\n\n  &.current-fragment {\n    color: green;\n  }\n}\n```\n\n## Example 2\n\nOne custom fragment I use from time to time is the background highlighted style. And it is very simple, instead of changing the color of the text, it changes the background color. I find that it is a much stronger indication than changing the text itself.\n\nThis fragment gives us two things. I leave the text visible beforehand. Then it turns the background orange, and after it lightens the background color a little bit.\n\n```scss\n$theme-orange: #FFB81A;\n\n.reveal .slides section .fragment.hl-orange {\n  opacity: unset;\n  visibility: unset;\n\n  &.visible {\n    background-color: $theme-orange;\n  }\n\n  &.current-fragment {\n    background-color: darken($theme-orange, 10%);\n  }\n}\n```\n\nThis once is nice and flexible because it is easy to extend.\n\n```scss\n$theme-orange: #FFB81A;\n$theme-yellow: #FFD571;\n$theme-brown: #E2AE86;\n$theme-pink: #FED7E1;\n\n.reveal .slides section .fragment {\n\n  &.hl-orange,\n  &.hl-yellow,\n  &.hl-pink,\n  &.hl-brown {\n    opacity: 1;\n    visibility: inherit\n  }\n\n  &.hl-brown.visible {\n    background-color: $theme-brown;\n  }\n\n  &.hl-brown.current-fragment {\n    background-color: darken($theme-brown, 10%);\n  }\n\n  &.hl-orange.visible {\n    background-color: $theme-orange;\n  }\n\n  &.hl-orange.current-fragment {\n    background-color: darken($theme-orange, 10%);\n  }\n\n  &.hl-yellow.visible {\n    background-color: $theme-yellow;\n  }\n\n  &.hl-yellow.current-fragment {\n    background-color: darken($theme-yellow, 10%);\n  }\n\n  &.hl-pink.visible {\n    background-color: $theme-pink;\n  }\n\n  &.hl-pink.current-fragment {\n    background-color: darken($theme-pink, 10%);\n  }\n}\n```\n\nAnd we are willing to tap into some scss we can condense it down quite a lot using [SCSS loops](scss.qmd#using-each-to-automatically-create-classes).\n\n```scss\n$colors: (\n  \"orange\": #FFB81A,\n  \"yellow\": #FFD571,\n  \"brown\": #E2AE86,\n  \"pink\": #FED7E1\n);\n\n@each $name, $color in $colors {\n  .reveal .slides section .fragment.hl-#{$name} {\n    opacity: unset;\n    visibility: unset;\n\n    &.visible {\n      background-color: lighten($color, 5%);\n    }\n\n    &.current-fragment {\n      background-color: $color;\n    }\n  }\n}\n```\n\n<iframe class=\"slide-deck\" src=\"examples/fragments/fragment-highlighter.html\">\n</iframe>\n\n<a href=\"examples/fragments/fragment-highlighter.qmd\" target=\"_blank\" class=\"listing-slides btn-links\">{{< fa file >}}qmd<a>\n<a href=\"examples/fragments/highlighter.scss\" target=\"_blank\" class=\"listing-video btn-links\">{{< fa brands sass >}}scss<a>\n\n## Example 3\n\nThe last example included a bit of flair by having the current fragment element be a slightly different color and then changing it after. We can simplify it a bit by not specifying the `.current-fragment` class.\n\n```scss\n$theme-orange: #FFB81A;\n\n.reveal .slides section .fragment.hl-orange {\n  opacity: unset;\n  visibility: unset;\n\n  &.visible {\n    background-color: $theme-orange;\n  }\n}\n```\n\nThis fragment works more or less the same way as before but doesn't change color once it is applied. It will be a more appropriate fragment many times.\n\nThis leads us to our final piece of knowledge in this blog post. We don't have to fully specify a fragment. We just have to declare how we want it to behave differently, and then the default \"stay hidden, then appear\" fragment.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"fragments.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.56","bibliography":["references.bib"],"theme":["cosmo","styles.scss"],"title":"Fragments"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}